/* The following code was generated by JFlex 1.4.3 on 19/05/11 16:40 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/05/11 16:40 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PNAME_LN2 = 6;
  public static final int PNAME_NS = 2;
  public static final int PNAME_LN = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\26\1\102\2\2\1\20\22\2\1\26\1\75\1\21\1\101"+
    "\1\7\1\0\1\73\1\17\1\24\1\25\1\76\1\15\1\71\1\12"+
    "\1\14\1\77\12\13\1\4\1\70\1\1\1\74\1\3\1\6\1\10"+
    "\1\35\1\33\1\47\1\55\1\16\1\42\1\63\1\62\1\44\1\11"+
    "\1\56\1\46\1\60\1\53\1\52\1\37\1\11\1\40\1\36\1\50"+
    "\1\54\1\11\1\61\1\45\1\57\1\11\1\27\1\22\1\30\1\100"+
    "\1\5\1\31\1\64\1\34\1\47\1\55\1\16\1\43\1\63\1\62"+
    "\1\44\1\11\1\56\1\46\1\60\1\23\1\52\1\37\1\11\1\41"+
    "\1\65\1\51\1\54\1\11\1\61\1\45\1\57\1\11\1\66\1\72"+
    "\1\67\71\0\1\32\10\0\27\5\4\0\34\5\1\0\u0208\5\160\32"+
    "\16\5\1\0\u1c81\5\14\0\2\5\61\0\2\32\57\0\u0120\5\u0a70\0"+
    "\u03f0\5\21\0\ua7ff\5\u2100\0\u04d0\5\40\0\u020e\5\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\1\1\5\1\13"+
    "\1\14\1\15\1\16\17\5\1\17\1\20\1\21\1\22"+
    "\1\23\2\1\1\24\1\25\1\26\1\27\1\1\1\30"+
    "\2\31\1\32\1\33\1\34\2\0\1\35\1\4\2\0"+
    "\1\36\1\0\1\37\1\40\1\41\1\4\1\41\1\42"+
    "\1\43\1\0\1\44\1\0\1\44\1\45\2\0\1\46"+
    "\2\0\1\46\1\0\1\5\1\0\1\47\1\0\1\50"+
    "\2\5\1\51\27\5\1\52\1\53\1\54\1\55\1\0"+
    "\1\56\2\0\2\35\1\40\2\0\1\57\1\0\1\44"+
    "\1\0\1\60\2\0\1\61\1\0\1\46\2\0\1\5"+
    "\1\50\2\5\1\62\2\5\1\63\27\5\1\0\1\42"+
    "\1\0\1\64\1\60\1\0\1\65\4\0\1\5\1\66"+
    "\7\5\1\67\5\5\1\70\2\5\1\71\4\5\1\72"+
    "\4\5\2\0\1\73\1\74\4\5\1\75\1\76\2\5"+
    "\1\77\1\5\1\100\1\5\1\101\2\5\1\102\1\5"+
    "\1\103\3\5\1\104\1\105\1\106\1\5\1\107\1\5"+
    "\1\110\5\5\1\111\4\5\1\112\1\113\7\5\1\114"+
    "\3\5\1\115\1\116\1\117\1\120\1\121\1\5\1\122"+
    "\1\5\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u010c\0\u04b6\0\u04f9\0\u053c\0\u010c\0\u057f"+
    "\0\u0218\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"+
    "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"+
    "\0\u0605\0\u010c\0\u010c\0\u0218\0\u010c\0\u09af\0\u09f2\0\u0218"+
    "\0\u0a35\0\u010c\0\u010c\0\u0a78\0\u0abb\0\u010c\0\u0afe\0\u0afe"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0218\0\u0218\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c0a\0\u0c90\0\u0218\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u053c\0\u010c"+
    "\0\u11cc\0\u0218\0\u120f\0\u1252\0\u0324\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533"+
    "\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b"+
    "\0\u178e\0\u17d1\0\u1814\0\u1857\0\u010c\0\u010c\0\u010c\0\u0218"+
    "\0\u0afe\0\u0afe\0\u189a\0\u0b41\0\u010c\0\u0cd3\0\u18dd\0\u0cd3"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\u010c\0\u1b7b\0\u1bbe\0\u1c01\0\u010c\0\u1c44"+
    "\0\u1c87\0\u0324\0\u1cca\0\u1d0d\0\u0324\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee"+
    "\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206"+
    "\0\u2249\0\u228c\0\u22cf\0\u2312\0\u18dd\0\u2355\0\u2398\0\u2398"+
    "\0\u1a6f\0\u23db\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a"+
    "\0\u0324\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff"+
    "\0\u0324\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u2917\0\u0324\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9"+
    "\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u0324\0\u0324\0\u2c3b"+
    "\0\u2c7e\0\u2cc1\0\u2d04\0\u0324\0\u0324\0\u2d47\0\u2d8a\0\u0324"+
    "\0\u2dcd\0\u0324\0\u2e10\0\u0324\0\u2e53\0\u2e96\0\u0324\0\u2ed9"+
    "\0\u0324\0\u2f1c\0\u2f5f\0\u2fa2\0\u0324\0\u0324\0\u0324\0\u2fe5"+
    "\0\u0324\0\u3028\0\u0324\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177"+
    "\0\u0324\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u0324\0\u0324\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u0324\0\u349b"+
    "\0\u34de\0\u3521\0\u0324\0\u0324\0\u0324\0\u0324\0\u0324\0\u3564"+
    "\0\u0324\0\u35a7\0\u0324";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\15\1\22"+
    "\1\23\1\24\1\11\1\25\1\26\1\27\1\23\1\30"+
    "\1\31\1\11\1\5\2\32\1\33\1\34\1\35\2\36"+
    "\2\37\1\40\1\15\1\41\1\42\2\43\1\44\1\25"+
    "\1\45\1\46\3\15\1\47\1\15\1\50\1\51\1\34"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\23\1\66\1\67\1\66"+
    "\1\67\1\70\2\67\1\66\2\67\1\66\1\67\2\66"+
    "\1\67\3\66\2\67\3\66\3\67\1\66\33\67\2\66"+
    "\1\67\3\66\1\67\3\66\1\67\3\66\1\67\1\66"+
    "\1\67\1\71\2\67\1\66\2\67\1\66\1\67\2\66"+
    "\1\67\3\66\2\67\3\66\3\67\1\66\33\67\2\66"+
    "\1\67\3\66\1\67\3\66\1\67\3\66\1\72\1\66"+
    "\4\72\1\66\2\72\1\66\1\72\2\66\1\72\3\66"+
    "\2\72\3\66\3\72\1\66\33\72\2\66\1\72\3\66"+
    "\1\72\3\66\1\72\2\66\103\0\1\73\1\74\1\0"+
    "\1\75\1\76\2\77\1\73\4\77\1\100\1\73\1\77"+
    "\1\73\2\0\1\74\1\77\2\73\1\0\2\77\1\74"+
    "\34\77\2\0\1\77\1\73\1\0\1\73\1\101\3\73"+
    "\1\74\1\73\2\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\4\74\1\102\1\0\1\74\3\0\2\74\3\0"+
    "\37\74\2\0\1\74\3\0\1\103\3\0\1\74\3\0"+
    "\1\104\1\0\4\104\1\0\2\104\1\74\1\104\1\102"+
    "\1\0\1\104\3\0\2\104\3\0\3\104\1\74\33\104"+
    "\2\0\1\104\3\0\1\104\3\0\1\104\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\4\74\1\102\1\0"+
    "\1\74\3\0\2\74\3\0\37\74\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\105\1\0\1\105\1\106"+
    "\2\105\1\0\2\105\1\74\1\105\1\102\1\0\1\105"+
    "\3\0\2\105\3\0\3\105\1\74\33\105\2\0\1\105"+
    "\3\0\1\105\3\0\1\105\3\0\1\107\1\0\4\107"+
    "\1\0\2\107\1\0\1\107\2\0\1\107\3\0\2\107"+
    "\3\0\3\107\1\0\33\107\2\0\1\107\3\0\1\107"+
    "\3\0\1\107\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\110\2\74\1\102\1\0\1\110\3\0"+
    "\1\74\1\110\3\0\4\74\33\110\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\33\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\15\0\1\111\1\112\67\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\3\74\1\17"+
    "\1\113\1\0\1\114\3\0\2\74\3\0\37\74\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\15\0\1\115\102\0"+
    "\1\116\1\117\66\0\17\120\1\121\1\0\1\120\1\122"+
    "\57\120\1\0\20\123\1\0\1\124\1\125\57\123\2\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\2\15\1\126\26\15\1\126\1\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\22\0\1\127\4\0\1\130"+
    "\1\127\53\0\1\127\1\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\4\74\1\102\1\0\1\74\1\0\1\131"+
    "\1\0\2\74\2\0\1\131\1\74\1\132\35\74\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\131\1\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\2\15\1\133\14\15\1\134\4\15\1\135\4\15"+
    "\1\133\1\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\3\15\1\136\26\15\1\136\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\137\3\0\1\74\1\15\3\0\4\74\2\15\1\140"+
    "\12\15\2\141\12\15\1\140\1\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\5\15\2\142\24\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\143\3\0\1\74\1\15\3\0\4\74"+
    "\33\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\2\15\1\144\2\15\2\145\2\15\1\146\17\15"+
    "\1\144\1\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\3\15\1\147\26\15\1\147\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\2\15\1\150"+
    "\6\15\1\151\17\15\1\150\1\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\17\15\1\152\13\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\5\15\2\153\24\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\4\15\1\154\2\155\2\156\22\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\157\3\0\4\74"+
    "\20\15\1\157\12\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\160\3\0\1\74"+
    "\1\15\3\0\4\74\2\15\1\161\6\15\1\162\17\15"+
    "\1\161\1\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\27\15\1\163\3\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\5\15\2\164\24\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\74\0\1\165"+
    "\103\0\1\166\103\0\1\167\7\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\4\74\1\102\1\0\1\74\3\0"+
    "\2\74\3\0\37\74\2\0\1\74\3\0\1\74\3\0"+
    "\1\170\2\0\102\65\2\0\1\171\1\0\1\171\1\172"+
    "\2\171\1\0\4\171\1\173\1\0\1\171\3\0\2\171"+
    "\3\0\37\171\2\0\1\171\3\0\1\171\3\0\1\171"+
    "\3\0\1\72\1\0\4\72\1\0\4\72\1\174\1\0"+
    "\1\72\3\0\2\72\3\0\37\72\2\0\1\72\3\0"+
    "\1\72\3\0\1\72\2\0\1\73\2\0\1\175\14\73"+
    "\3\0\3\73\1\0\2\73\1\0\34\73\2\0\2\73"+
    "\1\0\5\73\1\0\1\73\1\0\1\73\1\104\1\0"+
    "\1\176\3\177\1\73\2\177\1\77\1\177\1\100\1\73"+
    "\1\177\1\73\2\0\1\104\1\177\2\73\1\0\2\177"+
    "\1\104\1\77\33\177\2\0\1\177\1\73\1\0\1\73"+
    "\1\177\3\73\1\104\1\73\1\0\1\73\1\74\1\0"+
    "\1\75\1\76\2\77\1\73\4\77\1\100\1\73\1\77"+
    "\1\73\2\0\1\74\1\77\2\73\1\0\2\77\1\74"+
    "\34\77\2\0\1\77\1\73\1\0\1\73\1\77\3\73"+
    "\1\74\1\73\1\0\1\73\1\74\1\0\1\75\3\77"+
    "\1\73\4\77\1\100\1\73\1\77\1\73\2\0\1\74"+
    "\1\77\2\73\1\0\2\77\1\74\34\77\2\0\1\77"+
    "\1\73\1\0\1\73\1\77\3\73\1\74\1\73\2\0"+
    "\1\74\1\0\4\74\1\0\4\74\1\102\1\0\1\74"+
    "\3\0\2\74\3\0\37\74\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\104\1\0\4\104\1\0\4\104"+
    "\1\200\1\0\1\104\3\0\2\104\3\0\37\104\2\0"+
    "\1\104\3\0\1\104\3\0\1\104\3\0\1\105\1\0"+
    "\1\105\1\106\2\105\1\0\2\105\1\74\1\105\1\102"+
    "\1\0\1\105\3\0\2\105\3\0\37\105\2\0\1\105"+
    "\3\0\1\105\3\0\1\105\3\0\1\104\1\0\4\104"+
    "\1\0\2\104\1\74\1\104\1\102\1\0\1\104\3\0"+
    "\2\104\3\0\3\104\1\105\33\104\2\0\1\104\3\0"+
    "\1\104\3\0\1\104\3\0\1\107\1\0\4\107\1\0"+
    "\2\107\1\0\1\107\2\0\1\107\3\0\2\107\3\0"+
    "\37\107\2\0\1\107\3\0\1\107\3\0\1\107\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\110"+
    "\1\201\1\74\1\102\1\0\1\110\3\0\1\74\1\110"+
    "\3\0\4\74\33\110\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\15\0\1\111\1\202\1\0\1\203\77\0\1\202"+
    "\70\0\1\74\1\0\4\74\1\0\3\74\1\204\1\102"+
    "\1\0\1\114\3\0\2\74\3\0\37\74\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\2\74\1\205\1\206\1\102\1\207"+
    "\1\74\3\0\2\74\3\0\37\74\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\15\0\1\115\2\0\1\210\77\0"+
    "\1\116\1\211\1\0\1\212\77\0\1\211\67\0\17\120"+
    "\1\213\1\0\1\120\1\122\57\120\20\0\1\214\102\0"+
    "\1\120\1\0\3\120\10\0\1\120\4\0\1\120\1\0"+
    "\1\120\5\0\1\120\31\0\20\123\1\0\1\213\1\125"+
    "\57\123\22\0\1\215\100\0\1\123\1\0\3\123\10\0"+
    "\1\123\4\0\1\123\1\0\1\123\5\0\1\123\32\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\25\15\1\216\5\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\22\0\1\131\5\0\1\131\1\0\1\217"+
    "\51\0\1\131\1\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\3\15\1\220\26\15\1\220"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\21\15\1\221\11\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\23\15\1\222\7\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\13\15\1\223"+
    "\17\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\25\15\1\224\5\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\5\15\2\225\24\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\226\3\0\1\74\1\15\3\0\4\74\33\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\22\15\1\227\5\15\1\230\2\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\13\15\1\231\17\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\17\15\1\232\13\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\13\15\1\233\17\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\2\234\7\15"+
    "\1\235\1\15\1\236\5\15\1\237\11\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\240\3\0\4\74\20\15\1\240"+
    "\12\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\25\15\1\241\5\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\242\3\0\4\74\20\15\1\242\12\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\21\15"+
    "\1\243\11\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\15\15\2\244\14\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\22\15\1\245\10\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\7\15\2\246\22\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\11\15\1\247\21\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\3\15\1\250"+
    "\26\15\1\250\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\15\15\2\251\14\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\3\15\1\252\26\15"+
    "\1\252\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\253\3\0\1\74\1\15\3\0"+
    "\4\74\33\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\2\15\1\254\26\15\1\254\1\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\171\1\0"+
    "\4\171\1\0\4\171\1\173\1\0\1\171\3\0\2\171"+
    "\3\0\37\171\2\0\1\171\3\0\1\171\3\0\1\171"+
    "\2\0\1\73\1\104\1\0\1\176\3\177\1\73\4\177"+
    "\1\255\1\73\1\177\1\73\2\0\1\104\1\177\2\73"+
    "\1\0\2\177\1\104\34\177\2\0\1\177\1\73\1\0"+
    "\1\73\1\177\3\73\1\104\1\73\2\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\256\1\74\1\256"+
    "\1\102\1\0\1\256\3\0\1\74\1\256\3\0\4\74"+
    "\33\256\2\0\1\74\3\0\1\74\3\0\1\74\15\0"+
    "\1\202\2\0\1\203\76\0\1\257\1\260\1\0\1\257"+
    "\66\0\1\74\1\0\1\74\1\10\2\74\1\0\3\74"+
    "\1\204\1\102\1\0\1\114\3\0\2\74\3\0\37\74"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\3\74\1\206\1\102"+
    "\1\0\1\74\3\0\2\74\3\0\37\74\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\15\0\1\261\101\0\1\207"+
    "\1\261\1\0\1\207\100\0\1\211\2\0\1\212\76\0"+
    "\1\262\1\263\1\0\1\262\65\0\17\214\1\264\2\214"+
    "\1\265\60\214\21\215\1\266\1\267\60\215\1\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\270\3\0\1\74\1\15\3\0\4\74"+
    "\33\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\271\3\0\1\74\1\15\3\0"+
    "\4\74\33\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\272"+
    "\3\0\4\74\20\15\1\272\12\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\273"+
    "\3\0\1\74\1\15\3\0\4\74\33\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\274\3\0\1\74\1\15\3\0\4\74\33\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\7\15"+
    "\2\275\22\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\21\15\1\276\11\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\277"+
    "\3\0\1\74\1\15\3\0\4\74\33\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\3\15\1\300"+
    "\26\15\1\300\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\25\15\1\301\5\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\15\15\2\302\14\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\13\15\1\303\17\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\5\15\2\304\24\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\11\15\1\305"+
    "\21\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\5\15\2\306\24\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\30\15\1\307\2\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\11\15"+
    "\1\310\21\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\3\15\1\311\26\15\1\311\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\312\3\0\1\74\1\15\3\0\4\74\33\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\11\15"+
    "\1\313\21\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\314\3\0\1\74\1\15"+
    "\3\0\4\74\33\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\3\15\1\315\26\15\1\315\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\17\15"+
    "\1\316\13\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\14\15\1\317\16\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\2\15\1\320\26\15"+
    "\1\320\1\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\15\15\2\321\14\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\5\15\2\322\24\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\4\15\1\323\26\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\256\1\201\1\256\1\102\1\0\1\256\3\0"+
    "\1\74\1\256\3\0\4\74\33\256\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\15\0\1\260\102\0\1\263\67\0"+
    "\17\214\1\324\2\214\1\265\60\214\17\0\1\214\1\0"+
    "\3\214\10\0\1\214\4\0\1\214\1\0\1\214\5\0"+
    "\1\214\31\0\21\215\1\325\1\267\60\215\17\0\1\215"+
    "\1\0\3\215\10\0\1\215\4\0\1\215\1\0\1\215"+
    "\5\0\1\215\32\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\22\15\1\326\10\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\22\15"+
    "\1\327\10\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\14\15\1\330\16\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\15\15\2\331\14\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\11\15\1\332\21\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\14\15\1\333\16\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\12\15\1\334"+
    "\20\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\335\3\0\1\74\1\15\3\0"+
    "\4\74\33\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\336\3\0\1\74\1\15"+
    "\3\0\4\74\33\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\2\15\1\337\26\15\1\337\1\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\11\15\1\340\21\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\15\15\2\341\14\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\11\15\1\342"+
    "\21\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\25\15\1\343\5\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\15\15\2\344\14\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\15\15"+
    "\2\345\14\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\17\15\1\346\13\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\5\15\2\347\24\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\350\3\0\1\74\1\15\3\0\4\74"+
    "\33\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\351\3\0"+
    "\4\74\20\15\1\351\12\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\5\15\2\352\24\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\15\15"+
    "\2\353\14\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\11\15\1\354\21\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\355"+
    "\3\0\1\74\1\15\3\0\4\74\33\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\27\15\1\356"+
    "\3\15\2\0\1\74\3\0\1\74\3\0\1\74\2\0"+
    "\17\214\1\213\2\214\1\265\60\214\21\215\1\213\1\267"+
    "\60\215\1\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\15\15\2\357\14\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\360\3\0\1\74\1\15\3\0\4\74\33\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\12\15"+
    "\1\361\20\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\362\3\0\1\74\1\15"+
    "\3\0\4\74\33\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\5\15\2\363\24\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\364\3\0\4\74\20\15\1\364"+
    "\12\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\365\3\0\1\74\1\15\3\0"+
    "\4\74\33\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\2\15\1\366\27\15\1\366\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\5\15\2\367"+
    "\24\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\370\3\0"+
    "\4\74\20\15\1\370\12\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\15\15\2\371\14\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\11\15"+
    "\1\372\21\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\24\15\1\373\6\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\374\3\0\4\74\20\15\1\374\12\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\5\15\2\375\24\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\22\15\1\376\10\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\15\3\0\1\74\1\15\3\0\4\74\23\15\1\377"+
    "\7\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\5\15\2\u0100\24\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\15\15\2\u0101\14\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\21\15"+
    "\1\u0102\11\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\2\15\1\u0103\26\15\1\u0103\1\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\2\u0104"+
    "\31\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\15\3\0\1\74\1\15\3\0"+
    "\4\74\4\15\1\u0105\26\15\2\0\1\74\3\0\1\74"+
    "\3\0\1\74\3\0\1\74\1\0\1\74\1\10\2\74"+
    "\1\0\1\74\1\15\2\74\1\102\1\0\1\15\3\0"+
    "\1\74\1\15\3\0\4\74\14\15\1\u0106\16\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\25\15"+
    "\1\u0107\5\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\2\15\1\u0108\26\15\1\u0108\1\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\14\15"+
    "\1\u0109\16\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\14\15\1\u010a\16\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\13\15\1\u010b\17\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\u010c\3\0\1\74\1\15\3\0\4\74"+
    "\33\15\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\74\1\0\1\74\1\10\2\74\1\0\1\74\1\15"+
    "\2\74\1\102\1\0\1\u010d\3\0\1\74\1\15\3\0"+
    "\4\74\33\15\2\0\1\74\3\0\1\74\3\0\1\74"+
    "\3\0\1\74\1\0\1\74\1\10\2\74\1\0\1\74"+
    "\1\15\2\74\1\102\1\0\1\15\3\0\1\74\1\15"+
    "\3\0\4\74\15\15\2\u010e\14\15\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\74\1\0\1\74\1\10"+
    "\2\74\1\0\1\74\1\15\2\74\1\102\1\0\1\15"+
    "\3\0\1\74\1\15\3\0\4\74\13\15\1\u010f\17\15"+
    "\2\0\1\74\3\0\1\74\3\0\1\74\3\0\1\74"+
    "\1\0\1\74\1\10\2\74\1\0\1\74\1\15\2\74"+
    "\1\102\1\0\1\15\3\0\1\74\1\15\3\0\4\74"+
    "\27\15\1\u0110\3\15\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\74\1\0\1\74\1\10\2\74\1\0"+
    "\1\74\1\15\2\74\1\102\1\0\1\15\3\0\1\74"+
    "\1\15\3\0\4\74\15\15\2\u0111\14\15\2\0\1\74"+
    "\3\0\1\74\3\0\1\74\3\0\1\74\1\0\1\74"+
    "\1\10\2\74\1\0\1\74\1\15\2\74\1\102\1\0"+
    "\1\u0112\3\0\1\74\1\15\3\0\4\74\33\15\2\0"+
    "\1\74\3\0\1\74\3\0\1\74\3\0\1\74\1\0"+
    "\1\74\1\10\2\74\1\0\1\74\1\15\2\74\1\102"+
    "\1\0\1\15\3\0\1\74\1\15\3\0\4\74\3\15"+
    "\1\u0113\26\15\1\u0113\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13802];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\15\1\1\11\3\1\1\11\22\1\2\11"+
    "\1\1\1\11\4\1\2\11\2\1\1\11\4\1\2\0"+
    "\2\1\2\0\1\1\1\0\7\1\1\0\1\1\1\0"+
    "\2\1\2\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\11\1\0\33\1\3\11\1\1\1\0\1\1\2\0"+
    "\1\11\2\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\11\2\0\1\1\1\11\35\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\4\0\34\1"+
    "\2\0\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 35: 
          { return LIT_INTEGER_NEG;
          }
        case 84: break;
        case 31: 
          { return OP_GE;
          }
        case 85: break;
        case 74: 
          { return KW_REDUCED;
          }
        case 86: break;
        case 82: 
          { return KW_CONSTRUCT;
          }
        case 87: break;
        case 8: 
          { return OP_DOT;
          }
        case 88: break;
        case 77: 
          { return KW_OPTIONAL;
          }
        case 89: break;
        case 20: 
          { return OP_EQ;
          }
        case 90: break;
        case 70: 
          { return KW_SELECT;
          }
        case 91: break;
        case 39: 
          { return LIT_NIL;
          }
        case 92: break;
        case 71: 
          { return KW_PREFIX;
          }
        case 93: break;
        case 50: 
          { return KW_ASK;
          }
        case 94: break;
        case 15: 
          { return KW_A;
          }
        case 95: break;
        case 29: 
          { return LIT_IRI;
          }
        case 96: break;
        case 62: 
          { return LIT_FALSE;
          }
        case 97: break;
        case 64: 
          { return KW_IS_URI;
          }
        case 98: break;
        case 43: 
          { return OP_ANDAND;
          }
        case 99: break;
        case 22: 
          { return OP_MULT;
          }
        case 100: break;
        case 59: 
          { return KW_NAMED;
          }
        case 101: break;
        case 6: 
          { return OP_MINUS;
          }
        case 102: break;
        case 12: 
          { return OP_RROUND;
          }
        case 103: break;
        case 11: 
          { return OP_LROUND;
          }
        case 104: break;
        case 21: 
          { return OP_NOT;
          }
        case 105: break;
        case 9: 
          { return OP_PLUS;
          }
        case 106: break;
        case 81: 
          { return KW_IS_LITERAL;
          }
        case 107: break;
        case 53: 
          { return LIT_DOUBLE_POS;
          }
        case 108: break;
        case 17: 
          { return OP_RCURLY;
          }
        case 109: break;
        case 55: 
          { return KW_FROM;
          }
        case 110: break;
        case 80: 
          { return KW_DISTINCT;
          }
        case 111: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 112: break;
        case 48: 
          { return LIT_DOUBLE;
          }
        case 113: break;
        case 2: 
          { return OP_LT;
          }
        case 114: break;
        case 49: 
          { return LIT_DECIMAL_POS;
          }
        case 115: break;
        case 78: 
          { return KW_DESCRIBE;
          }
        case 116: break;
        case 18: 
          { return OP_SEMI;
          }
        case 117: break;
        case 73: 
          { return KW_OFFSET;
          }
        case 118: break;
        case 34: 
          { return LANGTAG;
          }
        case 119: break;
        case 51: 
          { return KW_STR;
          }
        case 120: break;
        case 46: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return NAME_NS;
          }
        case 121: break;
        case 24: 
          { return COMMENT;
          }
        case 122: break;
        case 16: 
          { return OP_LCURLY;
          }
        case 123: break;
        case 76: 
          { return KW_SAME_TERM;
          }
        case 124: break;
        case 5: 
          { return UNKNOWN;
          }
        case 125: break;
        case 3: 
          { return OP_GT;
          }
        case 126: break;
        case 68: 
          { return KW_WHERE;
          }
        case 127: break;
        case 52: 
          { return LIT_DOUBLE_NEG;
          }
        case 128: break;
        case 4: 
          { yypushback(yylength()); yybegin(PNAME_NS);
          }
        case 129: break;
        case 75: 
          { return KW_IS_BLANK;
          }
        case 130: break;
        case 69: 
          { return KW_GRAPH;
          }
        case 131: break;
        case 47: 
          { return LIT_DECIMAL_NEG;
          }
        case 132: break;
        case 7: 
          { return LIT_INTEGER;
          }
        case 133: break;
        case 60: 
          { return KW_BOUND;
          }
        case 134: break;
        case 32: 
          { yypushback(yylength()); yybegin(PNAME_LN);
          }
        case 135: break;
        case 66: 
          { return KW_ORDER;
          }
        case 136: break;
        case 25: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 137: break;
        case 33: 
          { return VAR;
          }
        case 138: break;
        case 65: 
          { return KW_LIMIT;
          }
        case 139: break;
        case 79: 
          { return KW_DATATYPE;
          }
        case 140: break;
        case 61: 
          { return KW_REGEX;
          }
        case 141: break;
        case 19: 
          { return OP_COMMA;
          }
        case 142: break;
        case 57: 
          { return LIT_TRUE;
          }
        case 143: break;
        case 10: 
          { return WHITE_SPACE;
          }
        case 144: break;
        case 37: 
          { return LIT_INTEGER_POS;
          }
        case 145: break;
        case 26: 
          { yybegin(YYINITIAL); return NAME_COLON;
          }
        case 146: break;
        case 44: 
          { return OP_NE;
          }
        case 147: break;
        case 36: 
          { return LIT_DECIMAL;
          }
        case 148: break;
        case 72: 
          { return KW_FILTER;
          }
        case 149: break;
        case 27: 
          { yybegin(PNAME_LN2); return NAME_COLON;
          }
        case 150: break;
        case 56: 
          { return KW_LANG;
          }
        case 151: break;
        case 14: 
          { return OP_RSQUARE;
          }
        case 152: break;
        case 28: 
          { yybegin(YYINITIAL); return NAME_LN;
          }
        case 153: break;
        case 30: 
          { return OP_LE;
          }
        case 154: break;
        case 54: 
          { return KW_BASE;
          }
        case 155: break;
        case 67: 
          { return KW_UNION;
          }
        case 156: break;
        case 38: 
          { return LIT_STRING;
          }
        case 157: break;
        case 58: 
          { return KW_DESC;
          }
        case 158: break;
        case 13: 
          { return OP_LSQUARE;
          }
        case 159: break;
        case 45: 
          { return OP_HATHAT;
          }
        case 160: break;
        case 63: 
          { return KW_IS_IRI;
          }
        case 161: break;
        case 42: 
          { return OP_PIPEPIPE;
          }
        case 162: break;
        case 23: 
          { return OP_DIV;
          }
        case 163: break;
        case 40: 
          { return LIT_ANON;
          }
        case 164: break;
        case 83: 
          { return KW_LANGMATCHES;
          }
        case 165: break;
        case 41: 
          { return KW_BY;
          }
        case 166: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
