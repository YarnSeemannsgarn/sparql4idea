/* The following code was generated by JFlex 1.4.3 on 17/05/11 15:15 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 15:15 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\2\2\2\1\2\5\2\1\11\1\11\2\2\1\11\22\2\1\11"+
    "\1\56\1\2\1\0\1\0\1\0\1\54\1\0\1\13\1\14\1\57"+
    "\1\7\1\52\1\4\1\6\1\60\12\5\1\0\1\51\1\1\1\55"+
    "\1\3\1\0\1\0\1\21\1\20\1\30\1\34\1\10\1\17\1\44"+
    "\1\43\1\25\1\0\1\35\1\27\1\37\1\12\1\40\1\23\1\0"+
    "\1\24\1\22\1\31\1\33\1\0\1\42\1\26\1\36\1\0\1\15"+
    "\1\2\1\16\1\61\1\0\1\2\1\45\1\20\1\30\1\41\1\10"+
    "\1\17\1\44\1\43\1\25\1\0\1\35\1\27\1\37\1\12\1\32"+
    "\1\23\1\0\1\24\1\46\1\31\1\33\1\0\1\42\1\26\1\36"+
    "\1\0\1\47\1\53\1\50\162\0\11\0\1\0\3\0\1\0\uff02\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\17\1\1\15"+
    "\1\16\1\17\1\20\1\21\2\1\1\22\1\23\1\24"+
    "\1\25\1\1\1\0\1\26\1\27\1\30\1\31\7\0"+
    "\1\32\24\0\1\33\1\34\1\35\1\36\1\0\1\37"+
    "\6\0\1\40\2\0\1\41\25\0\1\42\1\0\1\43"+
    "\11\0\1\44\2\0\1\45\11\0\1\46\1\47\1\0"+
    "\1\50\4\0\1\51\1\52\1\0\1\53\1\0\1\54"+
    "\3\0\1\55\1\56\3\0\1\57\1\60\1\61\1\62"+
    "\1\0\1\63\4\0\1\64\5\0\1\65\7\0\1\66"+
    "\3\0\1\67\1\70\1\71\1\72\1\73\1\0\1\74"+
    "\1\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\62"+
    "\0\62\0\u012c\0\62\0\62\0\62\0\62\0\u015e\0\u0190"+
    "\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u01c2\0\62\0\62"+
    "\0\62\0\62\0\u044c\0\u047e\0\62\0\u04b0\0\62\0\62"+
    "\0\u04e2\0\u0514\0\62\0\u0514\0\62\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\62\0\u06d6\0\u0708"+
    "\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898"+
    "\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u0a5a\0\u0a8c\0\62\0\62\0\62\0\62\0\u0abe\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\62\0\u0c1c"+
    "\0\u0c4e\0\62\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a"+
    "\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a"+
    "\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\62"+
    "\0\u109a\0\62\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u11c6"+
    "\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\62\0\u1324"+
    "\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4"+
    "\0\62\0\62\0\u14e6\0\62\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\62\0\62\0\u15e0\0\62\0\u1612\0\62\0\u1644\0\u1676"+
    "\0\u16a8\0\62\0\62\0\u16da\0\u170c\0\u173e\0\62\0\62"+
    "\0\62\0\62\0\u1770\0\62\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\62\0\u186a\0\u189c\0\u18ce\0\u1900\0\u1932\0\62\0\u1964"+
    "\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\62\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\62\0\62\0\62\0\62\0\62\0\u1b58"+
    "\0\62\0\u1b8a\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\2\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\3\2\1\31\1\33"+
    "\1\34\1\2\1\35\1\36\1\22\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\62\0\1\52\2\0\1\53\5\52\1\0\35\52\2\0"+
    "\2\52\1\0\1\52\1\54\3\52\56\0\1\55\11\0"+
    "\1\6\1\56\1\0\1\57\56\0\1\56\75\0\1\60"+
    "\23\0\1\60\35\0\1\61\2\0\1\62\1\63\17\0"+
    "\1\61\35\0\1\64\10\0\1\65\3\0\1\66\1\0"+
    "\1\65\4\0\1\64\36\0\1\67\23\0\1\67\23\0"+
    "\1\70\10\0\1\71\7\0\1\72\13\0\1\71\40\0"+
    "\1\73\45\0\1\74\73\0\1\75\23\0\1\75\34\0"+
    "\1\76\3\0\1\77\17\0\1\76\46\0\1\100\5\0"+
    "\1\100\45\0\1\101\54\0\1\102\3\0\1\103\1\104"+
    "\47\0\1\105\57\0\1\106\10\0\1\107\3\0\1\110"+
    "\17\0\1\107\57\0\1\111\42\0\1\112\110\0\1\113"+
    "\62\0\1\114\62\0\1\115\65\0\1\116\1\52\2\0"+
    "\1\53\5\52\1\0\35\52\2\0\2\52\1\0\5\52"+
    "\6\0\1\56\2\0\1\57\55\0\1\117\1\120\1\0"+
    "\1\117\111\0\1\121\51\0\1\122\72\0\2\123\47\0"+
    "\1\124\54\0\1\125\23\0\1\125\46\0\1\126\63\0"+
    "\1\127\53\0\1\130\71\0\1\131\46\0\1\132\45\0"+
    "\1\133\105\0\1\134\4\0\1\134\2\0\1\135\42\0"+
    "\1\136\1\0\1\137\3\0\1\140\40\0\1\141\106\0"+
    "\1\142\34\0\1\143\102\0\1\144\45\0\1\145\73\0"+
    "\1\146\64\0\1\147\4\0\1\147\45\0\1\150\56\0"+
    "\1\151\23\0\1\151\44\0\1\152\52\0\1\153\23\0"+
    "\1\153\23\0\1\154\72\0\1\155\23\0\1\155\21\0"+
    "\1\120\64\0\1\156\73\0\1\157\23\0\1\157\52\0"+
    "\1\160\53\0\1\161\40\0\1\162\63\0\1\163\57\0"+
    "\1\164\61\0\1\165\70\0\1\166\75\0\1\167\36\0"+
    "\1\170\75\0\1\171\62\0\1\172\60\0\1\173\101\0"+
    "\1\174\42\0\1\175\56\0\1\176\23\0\1\176\23\0"+
    "\1\177\73\0\1\200\23\0\1\200\40\0\1\201\44\0"+
    "\1\202\103\0\1\203\5\0\1\203\51\0\1\204\52\0"+
    "\1\205\23\0\1\205\45\0\1\206\54\0\1\207\60\0"+
    "\1\210\72\0\1\211\4\0\1\211\30\0\1\212\61\0"+
    "\1\213\105\0\1\214\4\0\1\214\50\0\1\215\62\0"+
    "\1\216\55\0\1\217\64\0\1\220\57\0\1\221\60\0"+
    "\1\222\65\0\1\223\55\0\1\224\73\0\1\225\53\0"+
    "\1\226\61\0\1\227\40\0\1\230\103\0\1\231\5\0"+
    "\1\231\45\0\1\232\47\0\1\233\73\0\1\234\66\0"+
    "\1\235\55\0\1\236\44\0\1\237\114\0\1\240\42\0"+
    "\1\241\66\0\1\242\40\0\1\243\77\0\1\244\43\0"+
    "\1\245\61\0\1\246\72\0\1\247\24\0\1\247\37\0"+
    "\1\250\66\0\1\251\42\0\1\252\74\0\1\253\72\0"+
    "\1\254\35\0\1\255\73\0\1\256\71\0\1\257\4\0"+
    "\1\257\44\0\1\260\66\0\1\261\63\0\1\262\47\0"+
    "\1\263\23\0\1\263\34\0\1\264\64\0\1\265\66\0"+
    "\1\266\70\0\1\267\43\0\1\270\23\0\1\270\44\0"+
    "\1\271\61\0\1\272\60\0\1\273\42\0\1\274\61\0"+
    "\1\275\102\0\1\276\57\0\1\277\75\0\1\300\47\0"+
    "\1\301\40\0\1\302\73\0\1\303\23\0\1\303\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\2\11\1\1\4\11"+
    "\20\1\4\11\2\1\1\11\1\1\2\11\1\1\1\0"+
    "\1\11\1\1\1\11\1\1\7\0\1\11\24\0\4\11"+
    "\1\0\1\1\6\0\1\11\2\0\1\11\25\0\1\11"+
    "\1\0\1\11\11\0\1\1\2\0\1\11\11\0\2\11"+
    "\1\0\1\11\4\0\2\11\1\0\1\11\1\0\1\11"+
    "\3\0\2\11\3\0\4\11\1\0\1\11\4\0\1\11"+
    "\5\0\1\11\7\0\1\11\3\0\5\11\1\0\1\11"+
    "\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[195];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { return KW_PREFIX;
          }
        case 62: break;
        case 30: 
          { return OP_HATHAT;
          }
        case 63: break;
        case 17: 
          { return OP_COMMA;
          }
        case 64: break;
        case 24: 
          { return OP_GE;
          }
        case 65: break;
        case 37: 
          { return LIT_TRUE;
          }
        case 66: break;
        case 26: 
          { return KW_BY;
          }
        case 67: break;
        case 7: 
          { return OP_PLUS;
          }
        case 68: break;
        case 5: 
          { return LIT_INTEGER;
          }
        case 69: break;
        case 36: 
          { return KW_LANG;
          }
        case 70: break;
        case 9: 
          { return OP_LROUND;
          }
        case 71: break;
        case 10: 
          { return OP_RROUND;
          }
        case 72: break;
        case 29: 
          { return OP_NE;
          }
        case 73: break;
        case 41: 
          { return KW_REGEX;
          }
        case 74: break;
        case 56: 
          { return KW_DESCRIBE;
          }
        case 75: break;
        case 46: 
          { return KW_UNION;
          }
        case 76: break;
        case 38: 
          { return KW_NAMED;
          }
        case 77: break;
        case 57: 
          { return KW_DATATYPE;
          }
        case 78: break;
        case 18: 
          { return OP_EQ;
          }
        case 79: break;
        case 20: 
          { return OP_MULT;
          }
        case 80: break;
        case 43: 
          { return KW_IS_URI;
          }
        case 81: break;
        case 44: 
          { return KW_LIMIT;
          }
        case 82: break;
        case 11: 
          { return OP_LSQUARE;
          }
        case 83: break;
        case 4: 
          { return OP_MINUS;
          }
        case 84: break;
        case 23: 
          { return OP_LE;
          }
        case 85: break;
        case 31: 
          { return LIT_DOUBLE;
          }
        case 86: break;
        case 53: 
          { return KW_REDUCED;
          }
        case 87: break;
        case 42: 
          { return KW_IS_IRI;
          }
        case 88: break;
        case 13: 
          { return KW_A;
          }
        case 89: break;
        case 22: 
          { return LIT_IRI;
          }
        case 90: break;
        case 40: 
          { return KW_BOUND;
          }
        case 91: break;
        case 48: 
          { return KW_GRAPH;
          }
        case 92: break;
        case 49: 
          { return KW_FILTER;
          }
        case 93: break;
        case 2: 
          { return OP_LT;
          }
        case 94: break;
        case 59: 
          { return KW_IS_LITERAL;
          }
        case 95: break;
        case 60: 
          { return KW_CONSTRUCT;
          }
        case 96: break;
        case 33: 
          { return KW_STR;
          }
        case 97: break;
        case 52: 
          { return KW_OFFSET;
          }
        case 98: break;
        case 32: 
          { return KW_ASK;
          }
        case 99: break;
        case 55: 
          { return KW_OPTIONAL;
          }
        case 100: break;
        case 16: 
          { return OP_SEMI;
          }
        case 101: break;
        case 34: 
          { return KW_FROM;
          }
        case 102: break;
        case 61: 
          { return KW_LANGMATCHES;
          }
        case 103: break;
        case 25: 
          { return LIT_DECIMAL;
          }
        case 104: break;
        case 27: 
          { return OP_PIPEPIPE;
          }
        case 105: break;
        case 6: 
          { return OP_DOT;
          }
        case 106: break;
        case 39: 
          { return LIT_FALSE;
          }
        case 107: break;
        case 21: 
          { return OP_DIV;
          }
        case 108: break;
        case 12: 
          { return OP_RSQUARE;
          }
        case 109: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 110: break;
        case 3: 
          { return OP_RT;
          }
        case 111: break;
        case 58: 
          { return KW_DISTINCT;
          }
        case 112: break;
        case 19: 
          { return OP_NOT;
          }
        case 113: break;
        case 8: 
          { return WHITE_SPACE;
          }
        case 114: break;
        case 45: 
          { return KW_ORDER;
          }
        case 115: break;
        case 28: 
          { return OP_ANDAND;
          }
        case 116: break;
        case 47: 
          { return KW_WHERE;
          }
        case 117: break;
        case 14: 
          { return OP_LCURLY;
          }
        case 118: break;
        case 54: 
          { return KW_SAME_TERM;
          }
        case 119: break;
        case 50: 
          { return KW_SELECT;
          }
        case 120: break;
        case 15: 
          { return OP_RCURLY;
          }
        case 121: break;
        case 35: 
          { return KW_BASE;
          }
        case 122: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
