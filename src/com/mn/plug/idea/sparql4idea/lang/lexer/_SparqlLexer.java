/* The following code was generated by JFlex 1.4.3 on 17/05/11 15:56 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 15:56 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\2\2\2\1\2\5\2\1\26\1\103\2\2\1\20\22\2\1\32"+
    "\1\76\1\21\1\102\1\7\1\0\1\74\1\17\1\24\1\25\1\77"+
    "\1\15\1\72\1\12\1\14\1\100\12\13\1\4\1\71\1\1\1\75"+
    "\1\3\1\6\1\10\1\35\1\34\1\46\1\54\1\16\1\31\1\64"+
    "\1\63\1\43\1\11\1\55\1\45\1\57\1\52\1\60\1\37\1\11"+
    "\1\40\1\36\1\47\1\53\1\11\1\62\1\44\1\56\1\11\1\27"+
    "\1\22\1\30\1\101\1\5\1\2\1\65\1\33\1\46\1\61\1\16"+
    "\1\42\1\64\1\63\1\43\1\11\1\55\1\45\1\57\1\23\1\51"+
    "\1\37\1\11\1\41\1\66\1\50\1\53\1\11\1\62\1\44\1\56"+
    "\1\11\1\67\1\73\1\70\162\5\11\0\1\5\3\0\1\5\uff02\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\3\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\1\1\5"+
    "\1\13\1\14\1\15\1\16\1\5\1\12\16\5\1\17"+
    "\1\20\1\21\1\22\1\23\2\1\1\24\1\25\1\26"+
    "\1\27\1\1\1\30\2\0\1\31\1\4\2\0\1\32"+
    "\1\0\1\33\1\4\2\34\1\35\1\7\1\0\1\36"+
    "\1\0\1\36\1\0\1\37\2\0\1\37\1\0\1\5"+
    "\1\0\1\40\1\0\1\41\1\0\5\5\1\42\24\5"+
    "\1\43\1\44\1\45\1\46\2\31\1\4\3\0\1\36"+
    "\1\0\1\47\1\0\1\37\2\0\1\5\1\41\5\5"+
    "\1\50\2\5\1\51\23\5\1\0\1\35\1\47\4\0"+
    "\2\5\1\52\1\5\1\53\11\5\1\54\2\5\1\55"+
    "\11\5\2\0\1\56\1\57\1\5\1\60\4\5\1\61"+
    "\1\62\1\5\1\63\1\5\1\64\3\5\1\65\1\66"+
    "\3\5\1\67\1\70\1\71\1\72\1\5\1\73\4\5"+
    "\1\74\5\5\1\75\7\5\1\76\3\5\1\77\1\100"+
    "\1\101\1\102\1\103\1\5\1\104\1\5\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u02a8\0\u0374\0\104"+
    "\0\u03b8\0\u03fc\0\u0440\0\104\0\u0484\0\314\0\u04c8\0\314"+
    "\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8"+
    "\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u0550\0\314"+
    "\0\314\0\314\0\314\0\u08c4\0\u0908\0\314\0\u094c\0\104"+
    "\0\104\0\u0990\0\u09d4\0\u0a18\0\314\0\314\0\u0a5c\0\u0aa0"+
    "\0\u0ae4\0\u0aa0\0\u0b28\0\314\0\u0b6c\0\u0198\0\u01dc\0\u0bb0"+
    "\0\u0bf4\0\u0330\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0440\0\104\0\u0ee0\0\314"+
    "\0\u0484\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u0264\0\u1078"+
    "\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\u1540\0\u1584\0\314\0\104\0\104\0\314\0\104"+
    "\0\u0b6c\0\u15c8\0\u0b6c\0\u160c\0\u1650\0\u1694\0\u16d8\0\u16d8"+
    "\0\u171c\0\104\0\u1760\0\u17a4\0\u17e8\0\104\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u0264\0\u1980\0\u19c4\0\u0264\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28"+
    "\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u15c8\0\u1f14\0\u171c\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u2024\0\u2068\0\u20ac\0\u0264\0\u20f0\0\u0264\0\u2134\0\u2178"+
    "\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398"+
    "\0\u23dc\0\u2420\0\u0264\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u0264\0\u0264"+
    "\0\u2750\0\u0264\0\u2794\0\u27d8\0\u281c\0\u2860\0\u0264\0\u0264"+
    "\0\u28a4\0\u0264\0\u28e8\0\u0264\0\u292c\0\u2970\0\u29b4\0\u0264"+
    "\0\u0264\0\u29f8\0\u2a3c\0\u2a80\0\u0264\0\u0264\0\u0264\0\u0264"+
    "\0\u2ac4\0\u0264\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u0264\0\u2c18"+
    "\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u0264\0\u2d6c\0\u2db0\0\u2df4"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u0264\0\u2f48\0\u2f8c\0\u2fd0"+
    "\0\u0264\0\u0264\0\u0264\0\u0264\0\u0264\0\u3014\0\u0264\0\u3058"+
    "\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\12\1\17"+
    "\1\20\1\21\1\4\1\22\1\23\1\24\1\20\1\25"+
    "\1\26\1\27\1\30\2\31\1\32\1\33\1\34\2\35"+
    "\1\27\1\36\1\12\1\37\1\40\2\41\1\42\1\22"+
    "\1\43\1\44\3\12\1\42\1\44\1\45\1\12\1\46"+
    "\1\47\1\33\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\20\104\0"+
    "\1\64\2\65\1\66\1\67\2\70\1\64\4\70\1\71"+
    "\1\64\1\70\1\64\2\0\1\65\1\70\2\64\1\0"+
    "\3\70\1\65\34\70\2\65\2\70\1\65\1\64\1\72"+
    "\3\64\1\65\1\64\2\0\3\65\1\6\2\65\1\0"+
    "\4\65\1\73\1\0\1\65\3\0\2\65\3\0\45\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\4\65\1\73\1\0\1\65\3\0\2\65\3\0"+
    "\45\65\1\0\1\74\3\0\1\65\3\0\6\75\1\0"+
    "\2\75\1\65\1\75\1\73\1\0\1\75\3\0\2\75"+
    "\3\0\45\75\1\0\1\75\3\0\1\75\3\0\3\76"+
    "\1\6\2\76\1\0\2\76\1\65\1\76\1\73\1\0"+
    "\1\76\3\0\2\76\3\0\45\76\1\0\1\76\3\0"+
    "\1\76\3\0\6\77\1\0\2\77\1\0\1\77\2\0"+
    "\1\77\3\0\2\77\3\0\45\77\1\0\1\77\3\0"+
    "\1\77\3\0\3\65\1\6\2\65\1\0\1\65\1\100"+
    "\2\65\1\73\1\0\1\100\3\0\1\65\1\100\3\0"+
    "\2\65\1\100\1\65\34\100\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\34\12\5\65\1\0\1\65\3\0"+
    "\1\65\15\0\1\101\1\102\70\0\3\65\1\6\2\65"+
    "\1\0\3\65\1\14\1\103\1\0\1\104\3\0\2\65"+
    "\3\0\45\65\1\0\1\65\3\0\1\65\15\0\1\105"+
    "\70\0\17\106\1\107\1\0\1\106\1\110\60\106\1\0"+
    "\20\111\1\0\1\112\1\113\60\111\2\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\2\12"+
    "\1\114\27\12\1\114\1\12\5\65\1\0\1\65\3\0"+
    "\1\65\22\0\1\115\4\0\1\116\1\115\3\0\1\115"+
    "\50\0\1\115\1\0\3\65\1\6\2\65\1\0\4\65"+
    "\1\73\1\0\1\65\1\0\1\117\1\0\2\65\2\0"+
    "\1\117\1\65\1\120\1\65\1\121\41\65\1\0\1\65"+
    "\3\0\1\65\1\0\1\117\1\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\2\12\1\122"+
    "\2\12\2\123\1\12\1\124\21\12\1\122\1\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\2\12\1\125"+
    "\13\12\1\126\4\12\1\127\1\12\1\126\4\12\1\125"+
    "\1\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\3\12\1\130\27\12\1\130\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\131\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\2\12\1\132\11\12\2\133\14\12"+
    "\1\132\1\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\5\12\2\134\25\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\135\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\34\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\3\12\1\136\27\12\1\136\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\2\12\1\137"+
    "\5\12\1\140\21\12\1\137\1\12\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\16\12\1\141\6\12\1\141"+
    "\6\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\5\12\2\142\25\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\143\1\65\4\12\1\144\2\145\1\143\24\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\146\3\0\2\65\1\12\1\65\17\12\1\146"+
    "\14\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\147\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\2\12\1\150\5\12\1\151\21\12\1\150\1\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\30\12\1\152"+
    "\3\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\5\12\2\153\25\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\4\65\1\73\1\0"+
    "\1\65\3\0\2\65\3\0\44\65\1\154\1\0\1\65"+
    "\3\0\1\65\76\0\1\155\104\0\1\156\7\0\3\65"+
    "\1\6\2\65\1\0\4\65\1\73\1\0\1\65\3\0"+
    "\2\65\3\0\45\65\1\0\1\65\3\0\1\157\2\0"+
    "\103\63\1\0\1\64\2\0\1\160\14\64\3\0\3\64"+
    "\1\0\3\64\1\0\34\64\2\0\2\64\1\0\5\64"+
    "\1\0\1\64\1\0\1\64\2\75\1\161\3\162\1\64"+
    "\2\162\1\70\1\162\1\71\1\64\1\162\1\64\2\0"+
    "\1\75\1\162\2\64\1\0\3\162\1\75\34\162\2\75"+
    "\2\162\1\75\1\64\1\162\3\64\1\75\1\64\1\0"+
    "\1\64\2\65\1\66\1\67\2\70\1\64\4\70\1\71"+
    "\1\64\1\70\1\64\2\0\1\65\1\70\2\64\1\0"+
    "\3\70\1\65\34\70\2\65\2\70\1\65\1\64\1\70"+
    "\3\64\1\65\1\64\1\0\1\64\2\65\1\66\3\70"+
    "\1\64\4\70\1\71\1\64\1\70\1\64\2\0\1\65"+
    "\1\70\2\64\1\0\3\70\1\65\34\70\2\65\2\70"+
    "\1\65\1\64\1\70\3\64\1\65\1\64\2\0\6\65"+
    "\1\0\4\65\1\73\1\0\1\65\3\0\2\65\3\0"+
    "\45\65\1\0\1\65\3\0\1\65\3\0\6\75\1\0"+
    "\4\75\1\163\1\0\1\75\3\0\2\75\3\0\45\75"+
    "\1\0\1\75\3\0\1\75\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\100\1\164\1\65\1\73\1\0\1\100"+
    "\3\0\1\65\1\100\3\0\2\65\1\100\1\65\34\100"+
    "\5\65\1\0\1\65\3\0\1\65\15\0\1\101\1\105"+
    "\1\0\1\165\66\0\6\65\1\0\3\65\1\166\1\73"+
    "\1\0\1\104\3\0\2\65\3\0\45\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\2\65"+
    "\1\167\1\170\1\73\1\171\1\65\3\0\2\65\3\0"+
    "\45\65\1\0\1\65\3\0\1\65\15\0\1\105\2\0"+
    "\1\165\65\0\17\106\1\172\1\0\1\106\1\110\60\106"+
    "\20\0\1\173\103\0\1\106\1\0\3\106\7\0\1\106"+
    "\5\0\2\106\5\0\1\106\33\0\20\111\1\0\1\172"+
    "\1\113\60\111\22\0\1\174\101\0\1\111\1\0\3\111"+
    "\7\0\1\111\5\0\2\111\5\0\1\111\34\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\24\12\1\175\7\12\5\65\1\0\1\65\3\0\1\65"+
    "\22\0\1\117\5\0\1\117\1\0\1\176\1\0\1\117"+
    "\50\0\1\117\1\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\12\12\1\177\21\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\25\12\2\200"+
    "\5\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\12\12\1\201\21\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\3\12\1\202\27\12\1\202\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\20\12\1\203\13\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\22\12"+
    "\1\204\11\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\12\12\1\205\21\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\24\12\1\206\7\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\5\12\2\207\25\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\210"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\21\12"+
    "\1\211\4\12\1\211\2\12\1\212\2\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\10\12\1\213\1\12"+
    "\1\214\5\12\1\215\13\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\216\3\0"+
    "\2\65\1\12\1\65\17\12\1\216\14\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\24\12\1\217\7\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\220\3\0\2\65\1\12\1\65\17\12"+
    "\1\220\14\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\20\12\1\221\13\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\222\1\65\7\12\1\222\24\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\14\12\2\223\16\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\21\12"+
    "\1\224\4\12\1\224\5\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\10\12\1\225\23\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\3\12\1\226\27\12"+
    "\1\226\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\14\12\2\227\16\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\3\12\1\230\27\12\1\230\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\231\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\34\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\2\12\1\232\27\12"+
    "\1\232\1\12\5\65\1\0\1\65\3\0\1\65\2\0"+
    "\1\64\2\75\1\161\3\162\1\64\4\162\1\233\1\64"+
    "\1\162\1\64\2\0\1\75\1\162\2\64\1\0\3\162"+
    "\1\75\34\162\2\75\2\162\1\75\1\64\1\162\3\64"+
    "\1\75\1\64\2\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\234\1\65\1\234\1\73\1\0\1\234\3\0\1\65"+
    "\1\234\3\0\2\65\1\234\1\65\34\234\5\65\1\0"+
    "\1\65\3\0\1\65\14\0\1\171\1\235\1\0\1\171"+
    "\67\0\3\65\1\6\2\65\1\0\3\65\1\166\1\73"+
    "\1\0\1\104\3\0\2\65\3\0\45\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\3\65"+
    "\1\170\1\73\1\0\1\65\3\0\2\65\3\0\45\65"+
    "\1\0\1\65\3\0\1\65\15\0\1\235\70\0\17\173"+
    "\1\236\2\173\1\237\61\173\21\174\1\240\1\241\61\174"+
    "\1\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\242\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\34\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\3\12\1\243\27\12\1\243\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\24\12\1\244\7\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\14\12"+
    "\2\245\16\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\246\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\34\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\247\3\0\2\65\1\12"+
    "\1\65\17\12\1\247\14\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\250\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\34\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\251\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\34\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\252\1\65\7\12\1\252\24\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\20\12\1\253\13\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\254"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\5\12"+
    "\2\255\25\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\10\12\1\256\23\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\5\12\2\257\25\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\31\12\1\260\2\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\10\12"+
    "\1\261\23\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\3\12\1\262\27\12\1\262\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\263\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\34\12\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\3\12\1\264\27\12\1\264"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\10\12"+
    "\1\265\23\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\266\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\34\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\16\12\1\267\6\12\1\267\6\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\13\12\1\270\20\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\2\12"+
    "\1\271\27\12\1\271\1\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\14\12\2\272\16\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\5\12\2\273\25\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\4\12"+
    "\1\274\27\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\234\1\164\1\234"+
    "\1\73\1\0\1\234\3\0\1\65\1\234\3\0\2\65"+
    "\1\234\1\65\34\234\5\65\1\0\1\65\3\0\1\65"+
    "\2\0\17\173\1\275\2\173\1\237\61\173\17\0\1\173"+
    "\1\0\3\173\7\0\1\173\5\0\2\173\5\0\1\173"+
    "\33\0\21\174\1\276\1\241\61\174\17\0\1\174\1\0"+
    "\3\174\7\0\1\174\5\0\2\174\5\0\1\174\34\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\21\12\1\277\4\12\1\277\5\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\300\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\34\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\301\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\34\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\21\12\1\302\4\12"+
    "\1\302\5\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\13\12\1\303\20\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\14\12\2\304\16\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\10\12\1\305\23\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\13\12"+
    "\1\306\20\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\11\12\1\307\22\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\10\12\1\310\23\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\14\12\2\311\16\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\10\12"+
    "\1\312\23\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\24\12\1\313\7\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\14\12\2\314\16\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\14\12\2\315\16\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\316"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\16\12"+
    "\1\317\6\12\1\317\6\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\5\12\2\320\25\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\321\3\0\2\65\1\12\1\65\17\12\1\321\14\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\5\12"+
    "\2\322\25\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\14\12\2\323\16\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\10\12\1\324\23\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\325\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\34\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\30\12\1\326\3\12"+
    "\5\65\1\0\1\65\3\0\1\65\2\0\17\173\1\172"+
    "\2\173\1\237\61\173\21\174\1\172\1\241\61\174\1\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\5\12\2\327\25\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\14\12\2\330\16\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\331\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\34\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\11\12\1\332\22\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\333"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\334"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\2\12"+
    "\1\335\30\12\1\335\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\5\12\2\336\25\12\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\14\12\2\337\16\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\340\3\0\2\65\1\12\1\65\17\12\1\340"+
    "\14\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\10\12\1\341\23\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\23\12\1\342\10\12\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\343"+
    "\3\0\2\65\1\12\1\65\17\12\1\343\14\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\5\12\2\344"+
    "\25\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\21\12\1\345\4\12\1\345\5\12\5\65\1\0\1\65"+
    "\3\0\1\65\3\0\3\65\1\6\2\65\1\0\1\65"+
    "\1\12\2\65\1\73\1\0\1\12\3\0\1\65\1\12"+
    "\3\0\2\65\1\12\1\65\5\12\2\346\25\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\14\12\2\347"+
    "\16\12\5\65\1\0\1\65\3\0\1\65\3\0\3\65"+
    "\1\6\2\65\1\0\1\65\1\12\2\65\1\73\1\0"+
    "\1\12\3\0\1\65\1\12\3\0\2\65\1\12\1\65"+
    "\20\12\1\350\13\12\5\65\1\0\1\65\3\0\1\65"+
    "\3\0\3\65\1\6\2\65\1\0\1\65\1\12\2\65"+
    "\1\73\1\0\1\12\3\0\1\65\1\12\3\0\2\65"+
    "\1\12\1\65\2\12\1\351\27\12\1\351\1\12\5\65"+
    "\1\0\1\65\3\0\1\65\3\0\3\65\1\6\2\65"+
    "\1\0\1\65\1\12\2\65\1\73\1\0\1\12\3\0"+
    "\1\65\1\12\3\0\2\65\1\12\1\65\2\352\32\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\4\12"+
    "\1\353\27\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\13\12\1\354\20\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\24\12\1\355\7\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\2\12\1\356\27\12"+
    "\1\356\1\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\13\12\1\357\20\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\13\12\1\360\20\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\12\12\1\361\21\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\362"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\363"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\14\12"+
    "\2\364\16\12\5\65\1\0\1\65\3\0\1\65\3\0"+
    "\3\65\1\6\2\65\1\0\1\65\1\12\2\65\1\73"+
    "\1\0\1\12\3\0\1\65\1\12\3\0\2\65\1\12"+
    "\1\65\12\12\1\365\21\12\5\65\1\0\1\65\3\0"+
    "\1\65\3\0\3\65\1\6\2\65\1\0\1\65\1\12"+
    "\2\65\1\73\1\0\1\12\3\0\1\65\1\12\3\0"+
    "\2\65\1\12\1\65\30\12\1\366\3\12\5\65\1\0"+
    "\1\65\3\0\1\65\3\0\3\65\1\6\2\65\1\0"+
    "\1\65\1\12\2\65\1\73\1\0\1\12\3\0\1\65"+
    "\1\12\3\0\2\65\1\12\1\65\14\12\2\367\16\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\370"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\34\12"+
    "\5\65\1\0\1\65\3\0\1\65\3\0\3\65\1\6"+
    "\2\65\1\0\1\65\1\12\2\65\1\73\1\0\1\12"+
    "\3\0\1\65\1\12\3\0\2\65\1\12\1\65\3\12"+
    "\1\371\27\12\1\371\5\65\1\0\1\65\3\0\1\65"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12444];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\3\1\1\11\33\1\2\11"+
    "\2\1\2\0\2\1\2\0\1\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\1\1\0\33\1\2\11"+
    "\1\1\1\11\2\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\1\1\11\34\1\1\0\2\1\4\0"+
    "\33\1\2\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return KW_PREFIX;
          }
        case 70: break;
        case 38: 
          { return OP_HATHAT;
          }
        case 71: break;
        case 19: 
          { return OP_COMMA;
          }
        case 72: break;
        case 28: 
          { return VAR;
          }
        case 73: break;
        case 27: 
          { return OP_GE;
          }
        case 74: break;
        case 45: 
          { return LIT_TRUE;
          }
        case 75: break;
        case 29: 
          { return LANGTAG;
          }
        case 76: break;
        case 34: 
          { return KW_BY;
          }
        case 77: break;
        case 9: 
          { return OP_PLUS;
          }
        case 78: break;
        case 7: 
          { return LIT_INTEGER;
          }
        case 79: break;
        case 44: 
          { return KW_LANG;
          }
        case 80: break;
        case 11: 
          { return OP_LROUND;
          }
        case 81: break;
        case 12: 
          { return OP_RROUND;
          }
        case 82: break;
        case 37: 
          { return OP_NE;
          }
        case 83: break;
        case 49: 
          { return KW_REGEX;
          }
        case 84: break;
        case 64: 
          { return KW_DESCRIBE;
          }
        case 85: break;
        case 54: 
          { return KW_UNION;
          }
        case 86: break;
        case 46: 
          { return KW_NAMED;
          }
        case 87: break;
        case 65: 
          { return KW_DATATYPE;
          }
        case 88: break;
        case 20: 
          { return OP_EQ;
          }
        case 89: break;
        case 33: 
          { return LIT_ANON;
          }
        case 90: break;
        case 24: 
          { return COMMENT;
          }
        case 91: break;
        case 22: 
          { return OP_MULT;
          }
        case 92: break;
        case 51: 
          { return KW_IS_URI;
          }
        case 93: break;
        case 52: 
          { return KW_LIMIT;
          }
        case 94: break;
        case 13: 
          { return OP_LSQUARE;
          }
        case 95: break;
        case 6: 
          { return OP_MINUS;
          }
        case 96: break;
        case 39: 
          { return LIT_DOUBLE;
          }
        case 97: break;
        case 26: 
          { return OP_LE;
          }
        case 98: break;
        case 61: 
          { return KW_REDUCED;
          }
        case 99: break;
        case 50: 
          { return KW_IS_IRI;
          }
        case 100: break;
        case 5: 
          { return UNKNOWN;
          }
        case 101: break;
        case 15: 
          { return KW_A;
          }
        case 102: break;
        case 25: 
          { return LIT_IRI;
          }
        case 103: break;
        case 48: 
          { return KW_BOUND;
          }
        case 104: break;
        case 56: 
          { return KW_GRAPH;
          }
        case 105: break;
        case 57: 
          { return KW_FILTER;
          }
        case 106: break;
        case 2: 
          { return OP_LT;
          }
        case 107: break;
        case 67: 
          { return KW_IS_LITERAL;
          }
        case 108: break;
        case 68: 
          { return KW_CONSTRUCT;
          }
        case 109: break;
        case 41: 
          { return KW_STR;
          }
        case 110: break;
        case 4: 
          { return LIT_PNAME;
          }
        case 111: break;
        case 60: 
          { return KW_OFFSET;
          }
        case 112: break;
        case 40: 
          { return KW_ASK;
          }
        case 113: break;
        case 32: 
          { return LIT_NIL;
          }
        case 114: break;
        case 63: 
          { return KW_OPTIONAL;
          }
        case 115: break;
        case 18: 
          { return OP_SEMI;
          }
        case 116: break;
        case 42: 
          { return KW_FROM;
          }
        case 117: break;
        case 69: 
          { return KW_LANGMATCHES;
          }
        case 118: break;
        case 30: 
          { return LIT_DECIMAL;
          }
        case 119: break;
        case 35: 
          { return OP_PIPEPIPE;
          }
        case 120: break;
        case 8: 
          { return OP_DOT;
          }
        case 121: break;
        case 47: 
          { return LIT_FALSE;
          }
        case 122: break;
        case 23: 
          { return OP_DIV;
          }
        case 123: break;
        case 14: 
          { return OP_RSQUARE;
          }
        case 124: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 125: break;
        case 3: 
          { return OP_RT;
          }
        case 126: break;
        case 66: 
          { return KW_DISTINCT;
          }
        case 127: break;
        case 31: 
          { return LIT_STRING;
          }
        case 128: break;
        case 21: 
          { return OP_NOT;
          }
        case 129: break;
        case 10: 
          { return WHITE_SPACE;
          }
        case 130: break;
        case 53: 
          { return KW_ORDER;
          }
        case 131: break;
        case 36: 
          { return OP_ANDAND;
          }
        case 132: break;
        case 55: 
          { return KW_WHERE;
          }
        case 133: break;
        case 16: 
          { return OP_LCURLY;
          }
        case 134: break;
        case 62: 
          { return KW_SAME_TERM;
          }
        case 135: break;
        case 58: 
          { return KW_SELECT;
          }
        case 136: break;
        case 43: 
          { return KW_BASE;
          }
        case 137: break;
        case 17: 
          { return OP_RCURLY;
          }
        case 138: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
