/* The following code was generated by JFlex 1.4.3 on 17/05/11 15:08 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 15:08 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\2\0\1\0\5\0\1\11\1\11\2\0\1\11\22\0\1\11"+
    "\1\55\1\0\1\0\1\0\1\0\1\53\1\0\1\13\1\14\1\56"+
    "\1\7\1\51\1\2\1\6\1\57\1\5\1\5\1\5\7\5\1\0"+
    "\1\50\1\1\1\54\1\3\1\0\1\0\1\21\1\20\1\27\1\33"+
    "\1\10\1\17\1\43\1\42\1\25\1\0\1\34\1\26\1\36\1\12"+
    "\1\37\1\23\1\0\1\24\1\22\1\30\1\32\1\0\1\41\1\4"+
    "\1\35\1\0\1\15\1\0\1\16\1\60\1\0\1\0\1\44\1\20"+
    "\1\27\1\40\1\10\1\17\1\43\1\42\1\25\1\0\1\34\1\26"+
    "\1\36\1\12\1\31\1\23\1\0\1\24\1\45\1\30\1\32\1\0"+
    "\1\41\1\4\1\35\1\0\1\46\1\52\1\47\162\0\11\0\1\0"+
    "\3\0\1\0\uff02\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\1\11\1\12\1\13\1\14\17\1\1\15"+
    "\1\16\1\17\1\20\1\21\2\1\1\22\1\23\1\24"+
    "\1\25\1\1\1\26\1\27\1\30\7\0\1\31\24\0"+
    "\1\32\1\33\1\34\1\35\1\0\1\36\6\0\1\37"+
    "\2\0\1\40\25\0\1\41\1\0\1\42\11\0\1\43"+
    "\2\0\1\44\11\0\1\45\1\46\1\0\1\47\4\0"+
    "\1\50\1\51\1\0\1\52\1\0\1\53\3\0\1\54"+
    "\1\55\3\0\1\56\1\57\1\60\1\61\1\0\1\62"+
    "\4\0\1\63\5\0\1\64\7\0\1\65\3\0\1\66"+
    "\1\67\1\70\1\71\1\72\1\0\1\73\1\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\365\0\61"+
    "\0\61\0\u0126\0\61\0\61\0\61\0\61\0\u0157\0\u0188"+
    "\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u01b9\0\61\0\61"+
    "\0\61\0\61\0\u0436\0\u0467\0\61\0\u0498\0\61\0\61"+
    "\0\u04c9\0\61\0\61\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\61\0\u0682\0\u06b3\0\u06e4\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\61\0\61\0\61\0\61\0\u0a56\0\u0a56\0\u0a87\0\u0ab8"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\61\0\u0bad\0\u0bde\0\61"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\61\0\u1014\0\61"+
    "\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\u122f\0\u1260\0\61\0\u1291\0\u12c2\0\u12f3"+
    "\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\61\0\61"+
    "\0\u144a\0\61\0\u147b\0\u14ac\0\u14dd\0\u150e\0\61\0\61"+
    "\0\u153f\0\61\0\u1570\0\61\0\u15a1\0\u15d2\0\u1603\0\61"+
    "\0\61\0\u1634\0\u1665\0\u1696\0\61\0\61\0\61\0\61"+
    "\0\u16c7\0\61\0\u16f8\0\u1729\0\u175a\0\u178b\0\61\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\61\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\61\0\u1a08\0\u1a39\0\u1a6a"+
    "\0\61\0\61\0\61\0\61\0\61\0\u1a9b\0\61\0\u1acc"+
    "\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\3\2\1\31\1\33\1\34"+
    "\1\2\1\35\1\36\1\22\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\135\0"+
    "\1\52\60\0\1\53\11\0\1\6\1\54\1\0\1\55"+
    "\55\0\1\54\74\0\1\56\22\0\1\56\35\0\1\57"+
    "\2\0\1\60\1\61\16\0\1\57\35\0\1\62\7\0"+
    "\1\63\3\0\1\64\1\0\1\63\4\0\1\62\36\0"+
    "\1\65\22\0\1\65\23\0\1\66\10\0\1\67\6\0"+
    "\1\70\13\0\1\67\40\0\1\71\44\0\1\72\72\0"+
    "\1\73\22\0\1\73\34\0\1\74\3\0\1\75\16\0"+
    "\1\74\45\0\1\76\5\0\1\76\45\0\1\77\53\0"+
    "\1\100\3\0\1\101\1\102\46\0\1\103\56\0\1\104"+
    "\10\0\1\105\3\0\1\106\16\0\1\105\56\0\1\107"+
    "\42\0\1\110\106\0\1\111\61\0\1\112\61\0\1\113"+
    "\64\0\1\114\5\0\1\54\2\0\1\55\52\0\1\115"+
    "\2\0\1\116\1\0\1\115\107\0\1\117\50\0\1\120"+
    "\71\0\2\121\46\0\1\122\54\0\1\123\22\0\1\123"+
    "\45\0\1\124\62\0\1\125\52\0\1\126\70\0\1\127"+
    "\46\0\1\130\44\0\1\131\103\0\1\132\4\0\1\132"+
    "\2\0\1\133\42\0\1\134\1\135\3\0\1\136\40\0"+
    "\1\137\104\0\1\140\34\0\1\141\100\0\1\142\45\0"+
    "\1\143\71\0\1\144\63\0\1\145\4\0\1\145\45\0"+
    "\1\146\55\0\1\147\22\0\1\147\43\0\1\150\52\0"+
    "\1\151\22\0\1\151\23\0\1\152\71\0\1\153\22\0"+
    "\1\153\21\0\1\116\63\0\1\154\72\0\1\155\22\0"+
    "\1\155\51\0\1\156\52\0\1\157\40\0\1\160\62\0"+
    "\1\161\56\0\1\162\60\0\1\163\67\0\1\164\73\0"+
    "\1\165\36\0\1\166\74\0\1\167\61\0\1\170\57\0"+
    "\1\171\77\0\1\172\42\0\1\173\55\0\1\174\22\0"+
    "\1\174\23\0\1\175\72\0\1\176\22\0\1\176\40\0"+
    "\1\177\43\0\1\200\101\0\1\201\5\0\1\201\50\0"+
    "\1\202\52\0\1\203\22\0\1\203\44\0\1\204\54\0"+
    "\1\205\57\0\1\206\70\0\1\207\4\0\1\207\30\0"+
    "\1\210\60\0\1\211\103\0\1\212\4\0\1\212\47\0"+
    "\1\213\61\0\1\214\55\0\1\215\62\0\1\216\35\0"+
    "\1\217\101\0\1\220\63\0\1\221\55\0\1\222\71\0"+
    "\1\223\52\0\1\224\60\0\1\225\40\0\1\226\101\0"+
    "\1\227\5\0\1\227\45\0\1\230\46\0\1\231\72\0"+
    "\1\232\64\0\1\233\55\0\1\234\43\0\1\235\112\0"+
    "\1\236\42\0\1\237\64\0\1\240\40\0\1\241\54\0"+
    "\1\242\64\0\1\243\60\0\1\244\71\0\1\245\23\0"+
    "\1\245\37\0\1\246\64\0\1\247\42\0\1\250\73\0"+
    "\1\251\70\0\1\252\35\0\1\253\72\0\1\254\67\0"+
    "\1\255\4\0\1\255\44\0\1\256\64\0\1\257\62\0"+
    "\1\260\47\0\1\261\22\0\1\261\34\0\1\262\63\0"+
    "\1\263\64\0\1\264\67\0\1\265\43\0\1\266\22\0"+
    "\1\266\43\0\1\267\60\0\1\270\57\0\1\271\42\0"+
    "\1\272\60\0\1\273\100\0\1\274\56\0\1\275\74\0"+
    "\1\276\46\0\1\277\40\0\1\300\72\0\1\301\22\0"+
    "\1\301\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6909];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\2\11\1\1\4\11"+
    "\20\1\4\11\2\1\1\11\1\1\2\11\1\1\2\11"+
    "\1\1\7\0\1\11\24\0\4\11\1\0\1\1\6\0"+
    "\1\11\2\0\1\11\25\0\1\11\1\0\1\11\11\0"+
    "\1\1\2\0\1\11\11\0\2\11\1\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\0\1\11\3\0\2\11\3\0"+
    "\4\11\1\0\1\11\4\0\1\11\5\0\1\11\7\0"+
    "\1\11\3\0\5\11\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[193];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 50: 
          { return KW_PREFIX;
          }
        case 61: break;
        case 29: 
          { return OP_HATHAT;
          }
        case 62: break;
        case 17: 
          { return OP_COMMA;
          }
        case 63: break;
        case 23: 
          { return OP_GE;
          }
        case 64: break;
        case 36: 
          { return LIT_TRUE;
          }
        case 65: break;
        case 25: 
          { return KW_BY;
          }
        case 66: break;
        case 7: 
          { return OP_PLUS;
          }
        case 67: break;
        case 5: 
          { return LIT_INTEGER;
          }
        case 68: break;
        case 35: 
          { return KW_LANG;
          }
        case 69: break;
        case 9: 
          { return OP_LROUND;
          }
        case 70: break;
        case 10: 
          { return OP_RROUND;
          }
        case 71: break;
        case 28: 
          { return OP_NE;
          }
        case 72: break;
        case 40: 
          { return KW_REGEX;
          }
        case 73: break;
        case 55: 
          { return KW_DESCRIBE;
          }
        case 74: break;
        case 45: 
          { return KW_UNION;
          }
        case 75: break;
        case 37: 
          { return KW_NAMED;
          }
        case 76: break;
        case 56: 
          { return KW_DATATYPE;
          }
        case 77: break;
        case 18: 
          { return OP_EQ;
          }
        case 78: break;
        case 20: 
          { return OP_MULT;
          }
        case 79: break;
        case 42: 
          { return KW_IS_URI;
          }
        case 80: break;
        case 43: 
          { return KW_LIMIT;
          }
        case 81: break;
        case 11: 
          { return OP_LSQUARE;
          }
        case 82: break;
        case 3: 
          { return OP_MINUS;
          }
        case 83: break;
        case 22: 
          { return OP_LE;
          }
        case 84: break;
        case 30: 
          { return LIT_DOUBLE;
          }
        case 85: break;
        case 52: 
          { return KW_REDUCED;
          }
        case 86: break;
        case 41: 
          { return KW_IS_IRI;
          }
        case 87: break;
        case 13: 
          { return KW_A;
          }
        case 88: break;
        case 39: 
          { return KW_BOUND;
          }
        case 89: break;
        case 47: 
          { return KW_GRAPH;
          }
        case 90: break;
        case 48: 
          { return KW_FILTER;
          }
        case 91: break;
        case 2: 
          { return OP_LT;
          }
        case 92: break;
        case 58: 
          { return KW_IS_LITERAL;
          }
        case 93: break;
        case 59: 
          { return KW_CONSTRUCT;
          }
        case 94: break;
        case 32: 
          { return KW_STR;
          }
        case 95: break;
        case 51: 
          { return KW_OFFSET;
          }
        case 96: break;
        case 31: 
          { return KW_ASK;
          }
        case 97: break;
        case 54: 
          { return KW_OPTIONAL;
          }
        case 98: break;
        case 16: 
          { return OP_SEMI;
          }
        case 99: break;
        case 33: 
          { return KW_FROM;
          }
        case 100: break;
        case 60: 
          { return KW_LANGMATCHES;
          }
        case 101: break;
        case 24: 
          { return LIT_DECIMAL;
          }
        case 102: break;
        case 26: 
          { return OP_PIPEPIPE;
          }
        case 103: break;
        case 6: 
          { return OP_DOT;
          }
        case 104: break;
        case 38: 
          { return LIT_FALSE;
          }
        case 105: break;
        case 21: 
          { return OP_DIV;
          }
        case 106: break;
        case 12: 
          { return OP_RSQUARE;
          }
        case 107: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 108: break;
        case 4: 
          { return OP_RT;
          }
        case 109: break;
        case 57: 
          { return KW_DISTINCT;
          }
        case 110: break;
        case 19: 
          { return OP_NOT;
          }
        case 111: break;
        case 8: 
          { return WHITE_SPACE;
          }
        case 112: break;
        case 44: 
          { return KW_ORDER;
          }
        case 113: break;
        case 27: 
          { return OP_ANDAND;
          }
        case 114: break;
        case 46: 
          { return KW_WHERE;
          }
        case 115: break;
        case 14: 
          { return OP_LCURLY;
          }
        case 116: break;
        case 53: 
          { return KW_SAME_TERM;
          }
        case 117: break;
        case 49: 
          { return KW_SELECT;
          }
        case 118: break;
        case 15: 
          { return OP_RCURLY;
          }
        case 119: break;
        case 34: 
          { return KW_BASE;
          }
        case 120: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
