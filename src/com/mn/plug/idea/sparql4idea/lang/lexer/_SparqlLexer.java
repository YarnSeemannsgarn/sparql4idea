/* The following code was generated by JFlex 1.4.3 on 17/05/11 14:59 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 14:59 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\0\2\0\1\0\5\0\1\6\1\6\2\0\1\6\22\0\1\6"+
    "\1\0\1\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0\1\1"+
    "\1\0\1\1\1\4\1\0\1\3\1\3\1\3\7\3\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\12\1\11\1\20\1\24\1\5"+
    "\1\10\1\34\1\33\1\16\1\0\1\25\1\17\1\27\1\7\1\30"+
    "\1\14\1\0\1\15\1\13\1\21\1\23\1\0\1\32\1\2\1\26"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\35\1\11\1\20"+
    "\1\31\1\5\1\10\1\34\1\33\1\16\1\0\1\25\1\17\1\27"+
    "\1\7\1\22\1\14\1\0\1\15\1\36\1\21\1\23\1\0\1\32"+
    "\1\2\1\26\1\0\3\0\162\0\11\0\1\0\3\0\1\0\uff02\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\20\1\1\4\1\5"+
    "\7\0\1\6\25\0\1\7\6\0\1\10\2\0\1\11"+
    "\25\0\1\12\1\0\1\13\11\0\1\14\2\0\1\15"+
    "\11\0\1\16\1\17\1\0\1\20\4\0\1\21\1\22"+
    "\1\0\1\23\1\0\1\24\3\0\1\25\1\26\3\0"+
    "\1\27\1\30\1\31\1\32\1\0\1\33\4\0\1\34"+
    "\5\0\1\35\7\0\1\36\3\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\0\1\44\1\0\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\37\0\174\0\233\0\272"+
    "\0\331\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2"+
    "\0\u01d1\0\u01f0\0\u020f\0\u022e\0\u024d\0\331\0\u026c\0\u028b"+
    "\0\u02aa\0\u02c9\0\u02e8\0\u0307\0\u0326\0\u0345\0\37\0\u0364"+
    "\0\u0383\0\u03a2\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u043d\0\u045c"+
    "\0\u047b\0\u049a\0\u04b9\0\u04d8\0\u04f7\0\u0516\0\u0535\0\u0554"+
    "\0\u0573\0\u0592\0\u05b1\0\u05d0\0\u05d0\0\u05ef\0\u060e\0\u062d"+
    "\0\u064c\0\u066b\0\u068a\0\37\0\u06a9\0\u06c8\0\37\0\u06e7"+
    "\0\u0706\0\u0725\0\u0744\0\u0763\0\u0782\0\u07a1\0\u07c0\0\u07df"+
    "\0\u07fe\0\u081d\0\u083c\0\u085b\0\u087a\0\u0899\0\u08b8\0\u08d7"+
    "\0\u08f6\0\u0915\0\u0934\0\u0953\0\37\0\u0972\0\37\0\u0991"+
    "\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a\0\u0a89"+
    "\0\u0aa8\0\u0ac7\0\u0ae6\0\37\0\u0b05\0\u0b24\0\u0b43\0\u0b62"+
    "\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\37\0\37\0\u0c1c"+
    "\0\37\0\u0c3b\0\u0c5a\0\u0c79\0\u0c98\0\37\0\37\0\u0cb7"+
    "\0\37\0\u0cd6\0\37\0\u0cf5\0\u0d14\0\u0d33\0\37\0\37"+
    "\0\u0d52\0\u0d71\0\u0d90\0\37\0\37\0\37\0\37\0\u0daf"+
    "\0\37\0\u0dce\0\u0ded\0\u0e0c\0\u0e2b\0\37\0\u0e4a\0\u0e69"+
    "\0\u0e88\0\u0ea7\0\u0ec6\0\37\0\u0ee5\0\u0f04\0\u0f23\0\u0f42"+
    "\0\u0f61\0\u0f80\0\u0f9f\0\37\0\u0fbe\0\u0fdd\0\u0ffc\0\37"+
    "\0\37\0\37\0\37\0\37\0\u101b\0\37\0\u103a\0\37";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\3\2\1\21\1\23\1\24\1\2"+
    "\1\25\1\26\1\12\42\0\1\3\1\27\1\30\34\0"+
    "\1\27\45\0\1\31\22\0\1\31\13\0\1\32\2\0"+
    "\1\33\1\34\16\0\1\32\13\0\1\35\7\0\1\36"+
    "\3\0\1\37\1\0\1\36\4\0\1\35\14\0\1\40"+
    "\22\0\1\40\5\0\1\41\4\0\1\42\6\0\1\43"+
    "\13\0\1\42\16\0\1\44\26\0\1\45\44\0\1\46"+
    "\22\0\1\46\12\0\1\47\3\0\1\50\16\0\1\47"+
    "\23\0\1\51\5\0\1\51\23\0\1\52\31\0\1\53"+
    "\3\0\1\54\1\55\30\0\1\56\34\0\1\57\4\0"+
    "\1\60\3\0\1\61\16\0\1\60\34\0\1\62\20\0"+
    "\1\63\24\0\1\27\1\0\1\30\32\0\1\64\1\0"+
    "\1\65\62\0\1\66\26\0\1\67\47\0\2\70\24\0"+
    "\1\71\32\0\1\72\22\0\1\72\23\0\1\73\40\0"+
    "\1\74\30\0\1\75\46\0\1\76\24\0\1\77\26\0"+
    "\1\100\55\0\1\101\4\0\1\101\2\0\1\102\20\0"+
    "\1\103\1\104\3\0\1\105\22\0\1\106\56\0\1\107"+
    "\16\0\1\110\52\0\1\111\23\0\1\112\47\0\1\113"+
    "\41\0\1\114\4\0\1\114\23\0\1\115\33\0\1\116"+
    "\22\0\1\116\21\0\1\117\30\0\1\120\22\0\1\120"+
    "\5\0\1\121\43\0\1\122\22\0\1\122\4\0\1\65"+
    "\40\0\1\123\44\0\1\124\22\0\1\124\27\0\1\125"+
    "\30\0\1\126\22\0\1\127\40\0\1\130\34\0\1\131"+
    "\36\0\1\132\41\0\1\133\51\0\1\134\20\0\1\135"+
    "\46\0\1\136\37\0\1\137\35\0\1\140\55\0\1\141"+
    "\20\0\1\142\33\0\1\143\22\0\1\143\5\0\1\144"+
    "\44\0\1\145\22\0\1\145\16\0\1\146\25\0\1\147"+
    "\53\0\1\150\5\0\1\150\26\0\1\151\30\0\1\152"+
    "\22\0\1\152\22\0\1\153\32\0\1\154\35\0\1\155"+
    "\46\0\1\156\4\0\1\156\12\0\1\157\36\0\1\160"+
    "\55\0\1\161\4\0\1\161\25\0\1\162\37\0\1\163"+
    "\33\0\1\164\40\0\1\165\20\0\1\166\52\0\1\167"+
    "\41\0\1\170\33\0\1\171\47\0\1\172\30\0\1\173"+
    "\36\0\1\174\22\0\1\175\53\0\1\176\5\0\1\176"+
    "\23\0\1\177\30\0\1\200\44\0\1\201\42\0\1\202"+
    "\33\0\1\203\25\0\1\204\64\0\1\205\20\0\1\206"+
    "\42\0\1\207\22\0\1\210\33\0\1\211\41\0\1\212"+
    "\36\0\1\213\43\0\1\214\23\0\1\214\15\0\1\215"+
    "\42\0\1\216\24\0\1\217\45\0\1\220\46\0\1\221"+
    "\17\0\1\222\44\0\1\223\45\0\1\224\4\0\1\224"+
    "\22\0\1\225\42\0\1\226\40\0\1\227\25\0\1\230"+
    "\22\0\1\230\12\0\1\231\41\0\1\232\42\0\1\233"+
    "\45\0\1\234\21\0\1\235\22\0\1\235\21\0\1\236"+
    "\36\0\1\237\35\0\1\240\24\0\1\241\36\0\1\242"+
    "\52\0\1\243\34\0\1\244\52\0\1\245\24\0\1\246"+
    "\22\0\1\247\44\0\1\250\22\0\1\250";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4185];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\22\1\7\0\1\11\25\0"+
    "\1\1\6\0\1\11\2\0\1\11\25\0\1\11\1\0"+
    "\1\11\11\0\1\1\2\0\1\11\11\0\2\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\0\1\11\3\0"+
    "\2\11\3\0\4\11\1\0\1\11\4\0\1\11\5\0"+
    "\1\11\7\0\1\11\3\0\5\11\1\0\1\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[168];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { return KW_PREFIX;
          }
        case 38: break;
        case 13: 
          { return LIT_TRUE;
          }
        case 39: break;
        case 6: 
          { return KW_BY;
          }
        case 40: break;
        case 2: 
          { return LIT_INTEGER;
          }
        case 41: break;
        case 12: 
          { return KW_LANG;
          }
        case 42: break;
        case 17: 
          { return KW_REGEX;
          }
        case 43: break;
        case 32: 
          { return KW_DESCRIBE;
          }
        case 44: break;
        case 22: 
          { return KW_UNION;
          }
        case 45: break;
        case 14: 
          { return KW_NAMED;
          }
        case 46: break;
        case 33: 
          { return KW_DATATYPE;
          }
        case 47: break;
        case 19: 
          { return KW_IS_URI;
          }
        case 48: break;
        case 20: 
          { return KW_LIMIT;
          }
        case 49: break;
        case 7: 
          { return LIT_DOUBLE;
          }
        case 50: break;
        case 18: 
          { return KW_IS_IRI;
          }
        case 51: break;
        case 29: 
          { return KW_REDUCED;
          }
        case 52: break;
        case 4: 
          { return KW_A;
          }
        case 53: break;
        case 16: 
          { return KW_BOUND;
          }
        case 54: break;
        case 24: 
          { return KW_GRAPH;
          }
        case 55: break;
        case 25: 
          { return KW_FILTER;
          }
        case 56: break;
        case 35: 
          { return KW_IS_LITERAL;
          }
        case 57: break;
        case 36: 
          { return KW_CONSTRUCT;
          }
        case 58: break;
        case 9: 
          { return KW_STR;
          }
        case 59: break;
        case 28: 
          { return KW_OFFSET;
          }
        case 60: break;
        case 8: 
          { return KW_ASK;
          }
        case 61: break;
        case 31: 
          { return KW_OPTIONAL;
          }
        case 62: break;
        case 10: 
          { return KW_FROM;
          }
        case 63: break;
        case 37: 
          { return KW_LANGMATCHES;
          }
        case 64: break;
        case 5: 
          { return LIT_DECIMAL;
          }
        case 65: break;
        case 15: 
          { return LIT_FALSE;
          }
        case 66: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 67: break;
        case 34: 
          { return KW_DISTINCT;
          }
        case 68: break;
        case 3: 
          { return WHITE_SPACE;
          }
        case 69: break;
        case 21: 
          { return KW_ORDER;
          }
        case 70: break;
        case 23: 
          { return KW_WHERE;
          }
        case 71: break;
        case 30: 
          { return KW_SAME_TERM;
          }
        case 72: break;
        case 26: 
          { return KW_SELECT;
          }
        case 73: break;
        case 11: 
          { return KW_BASE;
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
