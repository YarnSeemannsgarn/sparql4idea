/* The following code was generated by JFlex 1.4.3 on 17/05/11 15:17 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 15:17 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\2\2\2\1\2\5\2\1\13\1\13\2\2\1\13\22\2\1\23"+
    "\1\62\1\14\1\0\1\0\1\0\1\60\1\0\1\16\1\17\1\63"+
    "\1\11\1\56\1\6\1\10\1\64\12\7\1\4\1\55\1\1\1\61"+
    "\1\3\1\5\1\5\1\25\1\24\1\34\1\40\1\12\1\22\1\50"+
    "\1\47\1\31\1\5\1\41\1\33\1\43\1\15\1\44\1\27\1\5"+
    "\1\30\1\26\1\35\1\37\1\5\1\46\1\32\1\42\1\5\1\20"+
    "\1\2\1\21\1\65\1\5\1\2\1\51\1\24\1\34\1\45\1\12"+
    "\1\22\1\50\1\47\1\31\1\5\1\41\1\33\1\43\1\15\1\36"+
    "\1\27\1\5\1\30\1\52\1\35\1\37\1\5\1\46\1\32\1\42"+
    "\1\5\1\53\1\57\1\54\162\5\11\0\1\5\3\0\1\5\uff02\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\1\1\11\16\1\1\16\1\17\1\20\1\21\1\22"+
    "\2\1\1\23\1\24\1\25\1\26\1\1\2\0\1\27"+
    "\1\4\2\0\1\30\1\0\1\31\1\4\1\32\1\0"+
    "\1\32\6\0\1\33\24\0\1\34\1\35\1\36\1\37"+
    "\2\27\1\4\1\0\1\32\1\0\1\40\10\0\1\41"+
    "\2\0\1\42\24\0\1\40\2\0\1\43\1\0\1\44"+
    "\11\0\1\45\2\0\1\46\11\0\1\47\1\50\1\0"+
    "\1\51\4\0\1\52\1\53\1\0\1\54\1\0\1\55"+
    "\3\0\1\56\1\57\3\0\1\60\1\61\1\62\1\63"+
    "\1\0\1\64\4\0\1\65\5\0\1\66\7\0\1\67"+
    "\3\0\1\70\1\71\1\72\1\73\1\74\1\0\1\75"+
    "\1\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\u0144"+
    "\0\u017a\0\66\0\66\0\u01b0\0\66\0\66\0\242\0\242"+
    "\0\u01e6\0\242\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0252\0\242\0\242\0\242\0\242\0\u0510\0\u0546\0\242"+
    "\0\u057c\0\66\0\66\0\u05b2\0\u05e8\0\242\0\242\0\u061e"+
    "\0\u0654\0\u068a\0\u0654\0\u06c0\0\242\0\u06f6\0\u072c\0\u0762"+
    "\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\242"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c"+
    "\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c"+
    "\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\242\0\66\0\66\0\242"+
    "\0\66\0\u06f6\0\u0d4a\0\u06f6\0\u0d80\0\u0db6\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\242"+
    "\0\u0f9c\0\u0fd2\0\242\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0"+
    "\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u0d4a\0\u0dec"+
    "\0\u140a\0\u1440\0\242\0\u1476\0\242\0\u14ac\0\u14e2\0\u1518"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\242\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\242\0\242\0\u191a\0\242\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\242\0\242\0\u1a28\0\242\0\u1a5e"+
    "\0\242\0\u1a94\0\u1aca\0\u1b00\0\242\0\242\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\242\0\242\0\242\0\242\0\u1bd8\0\242\0\u1c0e"+
    "\0\u1c44\0\u1c7a\0\u1cb0\0\242\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\242\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02"+
    "\0\u1f38\0\242\0\u1f6e\0\u1fa4\0\u1fda\0\242\0\242\0\242"+
    "\0\242\0\242\0\u2010\0\242\0\u2046\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\4\1\7\1\10"+
    "\1\11\1\12\1\4\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\3\4\1\34\1\36\1\37\1\4\1\40\1\41"+
    "\1\25\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\66\0\1\55\2\56\1\57"+
    "\1\60\3\61\1\62\1\55\1\61\2\0\1\61\2\55"+
    "\3\61\1\56\27\61\2\56\2\61\1\56\1\55\1\63"+
    "\3\55\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\40\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\40\56\1\0\1\65\3\0\1\56"+
    "\1\0\5\66\1\56\1\66\1\64\1\0\1\66\2\0"+
    "\1\66\2\0\40\66\1\0\1\66\3\0\1\66\1\0"+
    "\3\56\1\6\2\56\1\10\1\67\1\0\1\70\2\0"+
    "\1\56\2\0\40\56\1\0\1\56\3\0\1\56\7\0"+
    "\1\71\57\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\5\56\1\72\23\56\1\72\6\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\5\56\1\73"+
    "\2\56\1\74\1\75\17\56\1\73\6\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\5\56\1\76\10\56\1\77"+
    "\3\56\1\100\1\56\1\77\4\56\1\76\6\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\6\56\1\101\23\56"+
    "\1\101\5\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\102\2\0\1\56\2\0"+
    "\5\56\1\103\7\56\1\104\13\56\1\103\6\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\10\56\1\105\27\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\106\2\0\1\56\2\0\40\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\6\56\1\107\23\56"+
    "\1\107\5\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\5\56\1\110\3\56\1\111\17\56\1\110\6\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\16\56\1\112\5\56"+
    "\1\112\13\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\10\56\1\113\27\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\2\56\1\114\4\56\1\115\1\116\27\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\117\2\0\40\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\120\2\0\1\56\2\0\5\56\1\121\3\56\1\122"+
    "\17\56\1\121\6\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\27\56\1\123\10\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\10\56\1\124\27\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\37\56\1\125\1\0\1\56\3\0"+
    "\1\56\60\0\1\126\66\0\1\127\5\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\40\56"+
    "\1\0\1\56\3\0\1\130\1\55\2\0\1\131\7\55"+
    "\2\0\6\55\1\0\27\55\2\0\2\55\1\0\5\55"+
    "\1\0\1\55\2\66\1\132\2\133\1\61\1\133\1\62"+
    "\1\55\1\133\2\0\1\133\2\55\3\133\1\66\27\133"+
    "\2\66\2\133\1\66\1\55\1\133\3\55\1\66\1\55"+
    "\2\56\1\57\1\60\3\61\1\62\1\55\1\61\2\0"+
    "\1\61\2\55\3\61\1\56\27\61\2\56\2\61\1\56"+
    "\1\55\1\61\3\55\1\56\1\55\2\56\1\57\4\61"+
    "\1\62\1\55\1\61\2\0\1\61\2\55\3\61\1\56"+
    "\27\61\2\56\2\61\1\56\1\55\1\61\3\55\1\56"+
    "\1\0\7\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\7\66\1\134"+
    "\1\0\1\66\2\0\1\66\2\0\40\66\1\0\1\66"+
    "\3\0\1\66\1\0\6\56\1\135\1\64\1\0\1\70"+
    "\2\0\1\56\2\0\40\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\1\56\1\136\1\137\1\64\1\140"+
    "\1\56\2\0\1\56\2\0\40\56\1\0\1\56\3\0"+
    "\1\56\7\0\1\71\2\0\1\141\54\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\23\56"+
    "\1\142\14\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\13\56\1\143\24\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\24\56\2\144\12\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\13\56\1\145\24\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\6\56\1\146\23\56\1\146\5\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\17\56\1\147"+
    "\20\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\21\56"+
    "\1\150\16\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\13\56\1\151\24\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\23\56\1\152\14\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\10\56\1\153\27\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\154"+
    "\2\0\1\56\2\0\40\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\20\56\1\155\4\56\1\155\2\56\1\156"+
    "\7\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\11\56"+
    "\1\157\1\56\1\160\3\56\1\161\20\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\162\2\0\40\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\23\56\1\163\14\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\164\2\0\40\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\17\56\1\165\20\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\2\56\1\166\35\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\15\56\1\167\22\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\20\56\1\170"+
    "\4\56\1\170\12\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\11\56\1\171\26\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\6\56\1\172\23\56\1\172\5\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\15\56\1\173\22\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\6\56\1\174"+
    "\23\56\1\174\5\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\175\2\0\1\56"+
    "\2\0\40\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\5\56\1\176\23\56\1\176\6\56\1\0\1\56\3\0"+
    "\1\56\1\55\2\66\1\132\4\133\1\177\1\55\1\133"+
    "\2\0\1\133\2\55\3\133\1\66\27\133\2\66\2\133"+
    "\1\66\1\55\1\133\3\55\1\66\1\0\3\56\1\6"+
    "\2\56\1\135\1\64\1\0\1\70\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\2\56\1\137\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\7\0\1\200\64\0"+
    "\1\140\1\200\1\0\1\140\55\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\201\2\0\1\56\2\0\40\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\6\56\1\202\23\56"+
    "\1\202\5\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\23\56\1\203\14\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\15\56\1\204\22\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\205\2\0"+
    "\1\56\2\0\40\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\206"+
    "\2\0\40\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\207\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\210\2\0\1\56\2\0\40\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\2\56\1\211"+
    "\35\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\17\56"+
    "\1\212\20\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\213\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\10\56"+
    "\1\214\27\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\11\56\1\215\26\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\10\56\1\216\27\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\30\56\1\217\7\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\11\56\1\220\26\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\6\56\1\221\23\56\1\221"+
    "\5\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\222\2\0\1\56\2\0\40\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\6\56\1\223"+
    "\23\56\1\223\5\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\11\56\1\224\26\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\225\2\0"+
    "\1\56\2\0\40\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\16\56\1\226\5\56\1\226\13\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\14\56\1\227\23\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\5\56\1\230\23\56"+
    "\1\230\6\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\15\56\1\231\22\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\10\56\1\232\27\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\7\56\1\233\30\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\20\56\1\234\4\56\1\234\12\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\235\2\0\1\56\2\0\40\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\236\2\0\1\56\2\0\40\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\20\56\1\237\4\56\1\237"+
    "\12\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\14\56"+
    "\1\240\23\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\15\56\1\241\22\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\11\56\1\242\26\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\14\56\1\243\23\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\12\56\1\244\25\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\11\56\1\245\26\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\15\56\1\246\22\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\11\56\1\247"+
    "\26\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\23\56"+
    "\1\250\14\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\15\56\1\251\22\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\15\56\1\252\22\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\253\2\0"+
    "\1\56\2\0\40\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\16\56\1\254\5\56\1\254\13\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\10\56\1\255\27\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\256\2\0\40\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\10\56\1\257\27\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\15\56\1\260\22\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\11\56\1\261"+
    "\26\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\262\2\0\1\56\2\0\40\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\27\56\1\263"+
    "\10\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\10\56"+
    "\1\264\27\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\15\56\1\265\22\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\266\2\0\1\56"+
    "\2\0\40\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\12\56\1\267\25\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\270\2\0\1\56"+
    "\2\0\40\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\271\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\5\56"+
    "\1\272\24\56\1\272\5\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\10\56\1\273\27\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\15\56\1\274\22\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\275\2\0\40\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\11\56\1\276\26\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\22\56\1\277\15\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\300\2\0\40\56\1\0\1\56"+
    "\3\0\1\56\1\0\3\56\1\6\3\56\1\64\1\0"+
    "\1\56\2\0\1\56\2\0\10\56\1\301\27\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\20\56\1\302\4\56"+
    "\1\302\12\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\10\56\1\303\27\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\15\56\1\304\22\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\17\56\1\305\20\56\1\0\1\56\3\0"+
    "\1\56\1\0\3\56\1\6\3\56\1\64\1\0\1\56"+
    "\2\0\1\56\2\0\5\56\1\306\23\56\1\306\6\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\4\56\1\307"+
    "\33\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\7\56"+
    "\1\310\30\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\14\56\1\311\23\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\23\56\1\312\14\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\56\2\0"+
    "\1\56\2\0\5\56\1\313\23\56\1\313\6\56\1\0"+
    "\1\56\3\0\1\56\1\0\3\56\1\6\3\56\1\64"+
    "\1\0\1\56\2\0\1\56\2\0\14\56\1\314\23\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\14\56\1\315"+
    "\23\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\13\56"+
    "\1\316\24\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\317\2\0\1\56\2\0"+
    "\40\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\320\2\0\1\56\2\0\40\56"+
    "\1\0\1\56\3\0\1\56\1\0\3\56\1\6\3\56"+
    "\1\64\1\0\1\56\2\0\1\56\2\0\15\56\1\321"+
    "\22\56\1\0\1\56\3\0\1\56\1\0\3\56\1\6"+
    "\3\56\1\64\1\0\1\56\2\0\1\56\2\0\13\56"+
    "\1\322\24\56\1\0\1\56\3\0\1\56\1\0\3\56"+
    "\1\6\3\56\1\64\1\0\1\56\2\0\1\56\2\0"+
    "\27\56\1\323\10\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\15\56\1\324\22\56\1\0\1\56\3\0\1\56"+
    "\1\0\3\56\1\6\3\56\1\64\1\0\1\325\2\0"+
    "\1\56\2\0\40\56\1\0\1\56\3\0\1\56\1\0"+
    "\3\56\1\6\3\56\1\64\1\0\1\56\2\0\1\56"+
    "\2\0\6\56\1\326\23\56\1\326\5\56\1\0\1\56"+
    "\3\0\1\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8316];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\2\1\2\11\1\1\2\11"+
    "\33\1\2\11\1\1\2\0\2\1\2\0\1\1\1\0"+
    "\3\1\1\0\1\1\6\0\1\1\24\0\1\1\2\11"+
    "\1\1\1\11\2\1\1\0\1\1\1\0\1\1\10\0"+
    "\1\1\2\0\1\1\24\0\1\1\2\0\1\1\1\0"+
    "\1\1\11\0\1\1\2\0\1\1\11\0\2\1\1\0"+
    "\1\1\4\0\2\1\1\0\1\1\1\0\1\1\3\0"+
    "\2\1\3\0\4\1\1\0\1\1\4\0\1\1\5\0"+
    "\1\1\7\0\1\1\3\0\5\1\1\0\1\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 52: 
          { return KW_PREFIX;
          }
        case 63: break;
        case 31: 
          { return OP_HATHAT;
          }
        case 64: break;
        case 18: 
          { return OP_COMMA;
          }
        case 65: break;
        case 25: 
          { return OP_GE;
          }
        case 66: break;
        case 38: 
          { return LIT_TRUE;
          }
        case 67: break;
        case 27: 
          { return KW_BY;
          }
        case 68: break;
        case 8: 
          { return OP_PLUS;
          }
        case 69: break;
        case 6: 
          { return LIT_INTEGER;
          }
        case 70: break;
        case 37: 
          { return KW_LANG;
          }
        case 71: break;
        case 10: 
          { return OP_LROUND;
          }
        case 72: break;
        case 11: 
          { return OP_RROUND;
          }
        case 73: break;
        case 30: 
          { return OP_NE;
          }
        case 74: break;
        case 42: 
          { return KW_REGEX;
          }
        case 75: break;
        case 57: 
          { return KW_DESCRIBE;
          }
        case 76: break;
        case 47: 
          { return KW_UNION;
          }
        case 77: break;
        case 39: 
          { return KW_NAMED;
          }
        case 78: break;
        case 58: 
          { return KW_DATATYPE;
          }
        case 79: break;
        case 19: 
          { return OP_EQ;
          }
        case 80: break;
        case 21: 
          { return OP_MULT;
          }
        case 81: break;
        case 44: 
          { return KW_IS_URI;
          }
        case 82: break;
        case 45: 
          { return KW_LIMIT;
          }
        case 83: break;
        case 12: 
          { return OP_LSQUARE;
          }
        case 84: break;
        case 5: 
          { return OP_MINUS;
          }
        case 85: break;
        case 24: 
          { return OP_LE;
          }
        case 86: break;
        case 32: 
          { return LIT_DOUBLE;
          }
        case 87: break;
        case 54: 
          { return KW_REDUCED;
          }
        case 88: break;
        case 43: 
          { return KW_IS_IRI;
          }
        case 89: break;
        case 14: 
          { return KW_A;
          }
        case 90: break;
        case 23: 
          { return LIT_IRI;
          }
        case 91: break;
        case 41: 
          { return KW_BOUND;
          }
        case 92: break;
        case 49: 
          { return KW_GRAPH;
          }
        case 93: break;
        case 50: 
          { return KW_FILTER;
          }
        case 94: break;
        case 2: 
          { return OP_LT;
          }
        case 95: break;
        case 60: 
          { return KW_IS_LITERAL;
          }
        case 96: break;
        case 61: 
          { return KW_CONSTRUCT;
          }
        case 97: break;
        case 4: 
          { return LIT_PNAME;
          }
        case 98: break;
        case 34: 
          { return KW_STR;
          }
        case 99: break;
        case 53: 
          { return KW_OFFSET;
          }
        case 100: break;
        case 33: 
          { return KW_ASK;
          }
        case 101: break;
        case 56: 
          { return KW_OPTIONAL;
          }
        case 102: break;
        case 17: 
          { return OP_SEMI;
          }
        case 103: break;
        case 35: 
          { return KW_FROM;
          }
        case 104: break;
        case 62: 
          { return KW_LANGMATCHES;
          }
        case 105: break;
        case 26: 
          { return LIT_DECIMAL;
          }
        case 106: break;
        case 28: 
          { return OP_PIPEPIPE;
          }
        case 107: break;
        case 7: 
          { return OP_DOT;
          }
        case 108: break;
        case 40: 
          { return LIT_FALSE;
          }
        case 109: break;
        case 22: 
          { return OP_DIV;
          }
        case 110: break;
        case 13: 
          { return OP_RSQUARE;
          }
        case 111: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 112: break;
        case 3: 
          { return OP_RT;
          }
        case 113: break;
        case 59: 
          { return KW_DISTINCT;
          }
        case 114: break;
        case 20: 
          { return OP_NOT;
          }
        case 115: break;
        case 9: 
          { return WHITE_SPACE;
          }
        case 116: break;
        case 46: 
          { return KW_ORDER;
          }
        case 117: break;
        case 29: 
          { return OP_ANDAND;
          }
        case 118: break;
        case 48: 
          { return KW_WHERE;
          }
        case 119: break;
        case 15: 
          { return OP_LCURLY;
          }
        case 120: break;
        case 55: 
          { return KW_SAME_TERM;
          }
        case 121: break;
        case 51: 
          { return KW_SELECT;
          }
        case 122: break;
        case 36: 
          { return KW_BASE;
          }
        case 123: break;
        case 16: 
          { return OP_RCURLY;
          }
        case 124: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
