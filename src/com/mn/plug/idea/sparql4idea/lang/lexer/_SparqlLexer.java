/* The following code was generated by JFlex 1.4.3 on 17/05/11 16:45 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/05/11 16:45 from the specification file
 * <tt>/home/matt/projects/opensource/github/sparql4idea/source/sparql4idea/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\26\1\102\2\2\1\20\22\2\1\26\1\75\1\21\1\101"+
    "\1\7\1\0\1\73\1\17\1\24\1\25\1\76\1\15\1\71\1\12"+
    "\1\14\1\77\12\13\1\4\1\70\1\1\1\74\1\3\1\6\1\10"+
    "\1\35\1\33\1\47\1\55\1\16\1\42\1\63\1\62\1\44\1\11"+
    "\1\56\1\46\1\60\1\53\1\52\1\37\1\11\1\40\1\36\1\50"+
    "\1\54\1\11\1\61\1\45\1\57\1\11\1\27\1\22\1\30\1\100"+
    "\1\5\1\31\1\64\1\34\1\47\1\55\1\16\1\43\1\63\1\62"+
    "\1\44\1\11\1\56\1\46\1\60\1\23\1\52\1\37\1\11\1\41"+
    "\1\65\1\51\1\54\1\11\1\61\1\45\1\57\1\11\1\66\1\72"+
    "\1\67\71\0\1\32\10\0\27\5\4\0\34\5\1\0\u0208\5\160\32"+
    "\16\5\1\0\u1c81\5\14\0\2\5\61\0\2\32\57\0\u0120\5\u0a70\0"+
    "\u03f0\5\21\0\ua7ff\5\u2100\0\u04d0\5\40\0\u020e\5\2\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\4\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\1\1\5\1\13"+
    "\1\14\1\15\1\16\17\5\1\17\1\20\1\21\1\22"+
    "\1\23\2\1\1\24\1\25\1\26\1\27\1\1\1\30"+
    "\2\0\1\31\1\4\2\0\1\32\1\0\1\33\1\34"+
    "\1\35\1\4\1\35\1\36\1\7\1\0\1\37\1\0"+
    "\1\37\1\0\1\40\2\0\1\40\1\0\1\5\1\0"+
    "\1\41\1\0\1\42\2\5\1\43\27\5\1\44\1\45"+
    "\1\46\1\47\2\31\1\34\3\0\1\37\1\0\1\50"+
    "\1\0\1\40\2\0\1\5\1\42\2\5\1\51\2\5"+
    "\1\52\26\5\1\0\1\36\1\50\4\0\1\5\1\53"+
    "\7\5\1\54\4\5\1\55\2\5\1\56\11\5\2\0"+
    "\1\57\1\60\4\5\1\61\1\62\1\5\1\63\1\5"+
    "\1\64\1\5\1\65\2\5\1\66\1\5\1\67\3\5"+
    "\1\70\1\71\1\72\1\5\1\73\1\5\1\74\4\5"+
    "\1\75\4\5\1\76\7\5\1\77\3\5\1\100\1\101"+
    "\1\102\1\103\1\104\1\5\1\105\1\5\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u029e\0\u0367\0\103"+
    "\0\u03aa\0\u03ed\0\u0430\0\103\0\u0473\0\u014f\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u04f9\0\103\0\103"+
    "\0\u014f\0\103\0\u08a3\0\u08e6\0\u014f\0\u0929\0\103\0\103"+
    "\0\u096c\0\u09af\0\u09f2\0\u014f\0\u014f\0\u0a35\0\u0a78\0\u0abb"+
    "\0\u0a78\0\u0afe\0\u014f\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d"+
    "\0\u0c90\0\u0324\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22"+
    "\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0430\0\103\0\u0f71\0\u014f"+
    "\0\u0fb4\0\u0ff7\0\u025b\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146"+
    "\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e"+
    "\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\103\0\103\0\103\0\u014f\0\103\0\u0b41"+
    "\0\u163f\0\u0b41\0\u1682\0\u16c5\0\u1708\0\u174b\0\u174b\0\u178e"+
    "\0\103\0\u17d1\0\u1814\0\u1857\0\103\0\u189a\0\u18dd\0\u025b"+
    "\0\u1920\0\u1963\0\u025b\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2"+
    "\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca"+
    "\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u163f\0\u1f68\0\u178e\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7\0\u025b\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u025b\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u025b\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u025b\0\u025b\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u025b\0\u025b\0\u2891\0\u025b\0\u28d4"+
    "\0\u025b\0\u2917\0\u025b\0\u295a\0\u299d\0\u025b\0\u29e0\0\u025b"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u025b\0\u025b\0\u025b\0\u2aec\0\u025b"+
    "\0\u2b2f\0\u025b\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u025b\0\u2c7e"+
    "\0\u2cc1\0\u2d04\0\u2d47\0\u025b\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53"+
    "\0\u2e96\0\u2ed9\0\u2f1c\0\u025b\0\u2f5f\0\u2fa2\0\u2fe5\0\u025b"+
    "\0\u025b\0\u025b\0\u025b\0\u025b\0\u3028\0\u025b\0\u306b\0\u025b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\12\1\17"+
    "\1\20\1\21\1\6\1\22\1\23\1\24\1\20\1\25"+
    "\1\26\1\6\1\2\2\27\1\30\1\31\1\32\2\33"+
    "\2\34\1\35\1\12\1\36\1\37\2\40\1\41\1\22"+
    "\1\42\1\43\3\12\1\44\1\12\1\45\1\46\1\31"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\20\103\0\1\63\1\64"+
    "\1\0\1\65\1\66\2\67\1\63\4\67\1\70\1\63"+
    "\1\67\1\63\2\0\1\64\1\67\2\63\1\0\2\67"+
    "\1\64\34\67\2\0\1\67\1\63\1\0\1\63\1\71"+
    "\3\63\1\64\1\63\2\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\4\64\1\72\1\0\1\64\3\0\2\64"+
    "\3\0\37\64\2\0\1\64\3\0\1\73\3\0\1\64"+
    "\3\0\1\74\1\0\4\74\1\0\2\74\1\64\1\74"+
    "\1\72\1\0\1\74\3\0\2\74\3\0\3\74\1\64"+
    "\33\74\2\0\1\74\3\0\1\74\3\0\1\74\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\4\64\1\72"+
    "\1\0\1\64\3\0\2\64\3\0\37\64\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\75\1\0\1\75"+
    "\1\76\2\75\1\0\2\75\1\64\1\75\1\72\1\0"+
    "\1\75\3\0\2\75\3\0\3\75\1\64\33\75\2\0"+
    "\1\75\3\0\1\75\3\0\1\75\3\0\1\77\1\0"+
    "\4\77\1\0\2\77\1\0\1\77\2\0\1\77\3\0"+
    "\2\77\3\0\3\77\1\0\33\77\2\0\1\77\3\0"+
    "\1\77\3\0\1\77\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\100\2\64\1\72\1\0\1\100"+
    "\3\0\1\64\1\100\3\0\4\64\33\100\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\33\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\15\0\1\101\1\102"+
    "\67\0\1\64\1\0\1\64\1\5\2\64\1\0\3\64"+
    "\1\14\1\103\1\0\1\104\3\0\2\64\3\0\37\64"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\15\0\1\105"+
    "\67\0\17\106\1\107\1\0\1\106\1\110\57\106\1\0"+
    "\20\111\1\0\1\112\1\113\57\111\2\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\2\12"+
    "\1\114\26\12\1\114\1\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\22\0\1\115\4\0\1\116\1\115\53\0"+
    "\1\115\1\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\4\64\1\72\1\0\1\64\1\0\1\117\1\0\2\64"+
    "\2\0\1\117\1\64\1\120\35\64\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\117\1\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\2\12"+
    "\1\121\14\12\1\122\4\12\1\123\4\12\1\121\1\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\3\12\1\124\26\12\1\124\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\125\3\0"+
    "\1\64\1\12\3\0\4\64\2\12\1\126\12\12\2\127"+
    "\12\12\1\126\1\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\5\12\2\130\24\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\131\3\0\1\64\1\12\3\0\4\64\33\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\2\12"+
    "\1\132\2\12\2\133\2\12\1\134\17\12\1\132\1\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\3\12\1\135\26\12\1\135\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\2\12\1\136\6\12\1\137"+
    "\17\12\1\136\1\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\17\12\1\140\13\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\5\12\2\141"+
    "\24\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\4\12\1\142\2\143\2\144\22\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\145\3\0\4\64\20\12\1\145"+
    "\12\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\146\3\0\1\64\1\12\3\0"+
    "\4\64\2\12\1\147\6\12\1\150\17\12\1\147\1\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\27\12\1\151\3\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\5\12\2\152\24\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\74\0\1\153\103\0\1\154"+
    "\103\0\1\155\7\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\4\64\1\72\1\0\1\64\3\0\2\64\3\0"+
    "\37\64\2\0\1\64\3\0\1\64\3\0\1\156\2\0"+
    "\102\62\1\0\1\63\2\0\1\157\14\63\3\0\3\63"+
    "\1\0\2\63\1\0\34\63\2\0\2\63\1\0\5\63"+
    "\1\0\1\63\1\0\1\63\1\74\1\0\1\160\3\161"+
    "\1\63\2\161\1\67\1\161\1\70\1\63\1\161\1\63"+
    "\2\0\1\74\1\161\2\63\1\0\2\161\1\74\1\67"+
    "\33\161\2\0\1\161\1\63\1\0\1\63\1\161\3\63"+
    "\1\74\1\63\1\0\1\63\1\64\1\0\1\65\1\66"+
    "\2\67\1\63\4\67\1\70\1\63\1\67\1\63\2\0"+
    "\1\64\1\67\2\63\1\0\2\67\1\64\34\67\2\0"+
    "\1\67\1\63\1\0\1\63\1\67\3\63\1\64\1\63"+
    "\1\0\1\63\1\64\1\0\1\65\3\67\1\63\4\67"+
    "\1\70\1\63\1\67\1\63\2\0\1\64\1\67\2\63"+
    "\1\0\2\67\1\64\34\67\2\0\1\67\1\63\1\0"+
    "\1\63\1\67\3\63\1\64\1\63\2\0\1\64\1\0"+
    "\4\64\1\0\4\64\1\72\1\0\1\64\3\0\2\64"+
    "\3\0\37\64\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\74\1\0\4\74\1\0\4\74\1\162\1\0"+
    "\1\74\3\0\2\74\3\0\37\74\2\0\1\74\3\0"+
    "\1\74\3\0\1\74\3\0\1\75\1\0\1\75\1\76"+
    "\2\75\1\0\2\75\1\64\1\75\1\72\1\0\1\75"+
    "\3\0\2\75\3\0\37\75\2\0\1\75\3\0\1\75"+
    "\3\0\1\75\3\0\1\74\1\0\4\74\1\0\2\74"+
    "\1\64\1\74\1\72\1\0\1\74\3\0\2\74\3\0"+
    "\3\74\1\75\33\74\2\0\1\74\3\0\1\74\3\0"+
    "\1\74\3\0\1\77\1\0\4\77\1\0\2\77\1\0"+
    "\1\77\2\0\1\77\3\0\2\77\3\0\37\77\2\0"+
    "\1\77\3\0\1\77\3\0\1\77\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\100\1\163\1\64"+
    "\1\72\1\0\1\100\3\0\1\64\1\100\3\0\4\64"+
    "\33\100\2\0\1\64\3\0\1\64\3\0\1\64\15\0"+
    "\1\101\1\105\1\0\1\164\65\0\1\64\1\0\4\64"+
    "\1\0\3\64\1\165\1\72\1\0\1\104\3\0\2\64"+
    "\3\0\37\64\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\2\64"+
    "\1\166\1\167\1\72\1\170\1\64\3\0\2\64\3\0"+
    "\37\64\2\0\1\64\3\0\1\64\3\0\1\64\15\0"+
    "\1\105\2\0\1\164\64\0\17\106\1\171\1\0\1\106"+
    "\1\110\57\106\20\0\1\172\102\0\1\106\1\0\3\106"+
    "\10\0\1\106\4\0\1\106\1\0\1\106\5\0\1\106"+
    "\31\0\20\111\1\0\1\171\1\113\57\111\22\0\1\173"+
    "\100\0\1\111\1\0\3\111\10\0\1\111\4\0\1\111"+
    "\1\0\1\111\5\0\1\111\32\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\25\12\1\174"+
    "\5\12\2\0\1\64\3\0\1\64\3\0\1\64\22\0"+
    "\1\117\5\0\1\117\1\0\1\175\51\0\1\117\1\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\3\12\1\176\26\12\1\176\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\21\12\1\177\11\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\23\12\1\200\7\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\13\12\1\201\17\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\25\12\1\202"+
    "\5\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\5\12\2\203\24\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\204\3\0"+
    "\1\64\1\12\3\0\4\64\33\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\22\12\1\205\5\12"+
    "\1\206\2\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\13\12\1\207\17\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\17\12\1\210\13\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\13\12\1\211\17\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\11\12\1\212\1\12\1\213\5\12"+
    "\1\214\11\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\215"+
    "\3\0\4\64\20\12\1\215\12\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\25\12\1\216\5\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\217\3\0\4\64"+
    "\20\12\1\217\12\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\21\12\1\220\11\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\15\12\2\221"+
    "\14\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\22\12\1\222\10\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\7\12\2\223\22\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\11\12"+
    "\1\224\21\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\3\12\1\225\26\12\1\225\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\15\12\2\226"+
    "\14\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\3\12\1\227\26\12\1\227\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\230"+
    "\3\0\1\64\1\12\3\0\4\64\33\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\2\12\1\231"+
    "\26\12\1\231\1\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\2\0\1\63\1\74\1\0\1\160\3\161\1\63"+
    "\4\161\1\232\1\63\1\161\1\63\2\0\1\74\1\161"+
    "\2\63\1\0\2\161\1\74\34\161\2\0\1\161\1\63"+
    "\1\0\1\63\1\161\3\63\1\74\1\63\2\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\233\1\64"+
    "\1\233\1\72\1\0\1\233\3\0\1\64\1\233\3\0"+
    "\4\64\33\233\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\14\0\1\170\1\234\1\0\1\170\66\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\3\64\1\165\1\72\1\0"+
    "\1\104\3\0\2\64\3\0\37\64\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\3\64\1\167\1\72\1\0\1\64\3\0"+
    "\2\64\3\0\37\64\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\15\0\1\234\67\0\17\172\1\235\2\172\1\236"+
    "\60\172\21\173\1\237\1\240\60\173\1\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\241\3\0\1\64\1\12\3\0\4\64\33\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\242\3\0\1\64\1\12\3\0\4\64"+
    "\33\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\243\3\0"+
    "\4\64\20\12\1\243\12\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\244\3\0"+
    "\1\64\1\12\3\0\4\64\33\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\245"+
    "\3\0\1\64\1\12\3\0\4\64\33\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\7\12\2\246"+
    "\22\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\21\12\1\247\11\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\250\3\0"+
    "\1\64\1\12\3\0\4\64\33\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\3\12\1\251\26\12"+
    "\1\251\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\25\12\1\252\5\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\15\12\2\253\14\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\5\12"+
    "\2\254\24\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\11\12\1\255\21\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\5\12\2\256\24\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\30\12\1\257\2\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\11\12\1\260\21\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\3\12\1\261"+
    "\26\12\1\261\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\262\3\0\1\64\1\12"+
    "\3\0\4\64\33\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\11\12\1\263\21\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\264\3\0\1\64\1\12\3\0\4\64\33\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\3\12"+
    "\1\265\26\12\1\265\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\17\12\1\266\13\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\14\12\1\267"+
    "\16\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\2\12\1\270\26\12\1\270\1\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\15\12\2\271"+
    "\14\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\5\12\2\272\24\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\4\12\1\273\26\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\233\1\163\1\233"+
    "\1\72\1\0\1\233\3\0\1\64\1\233\3\0\4\64"+
    "\33\233\2\0\1\64\3\0\1\64\3\0\1\64\2\0"+
    "\17\172\1\274\2\172\1\236\60\172\17\0\1\172\1\0"+
    "\3\172\10\0\1\172\4\0\1\172\1\0\1\172\5\0"+
    "\1\172\31\0\21\173\1\275\1\240\60\173\17\0\1\173"+
    "\1\0\3\173\10\0\1\173\4\0\1\173\1\0\1\173"+
    "\5\0\1\173\32\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\22\12\1\276\10\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\22\12"+
    "\1\277\10\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\14\12\1\300\16\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\15\12\2\301\14\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\11\12\1\302\21\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\14\12\1\303\16\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\12\12\1\304"+
    "\20\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\305\3\0\1\64\1\12\3\0"+
    "\4\64\33\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\306\3\0\1\64\1\12"+
    "\3\0\4\64\33\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\11\12\1\307\21\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\15\12\2\310"+
    "\14\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\11\12\1\311\21\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\25\12\1\312\5\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\15\12"+
    "\2\313\14\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\15\12\2\314\14\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\17\12\1\315\13\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\5\12\2\316\24\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\317\3\0\1\64"+
    "\1\12\3\0\4\64\33\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\320\3\0\4\64\20\12\1\320\12\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\5\12"+
    "\2\321\24\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\15\12\2\322\14\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\11\12\1\323\21\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\324\3\0\1\64\1\12\3\0\4\64"+
    "\33\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\27\12\1\325\3\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\2\0\17\172\1\171\2\172\1\236\60\172"+
    "\21\173\1\171\1\240\60\173\1\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\15\12\2\326"+
    "\14\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\327\3\0\1\64\1\12\3\0"+
    "\4\64\33\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\12\12\1\330\20\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\331"+
    "\3\0\1\64\1\12\3\0\4\64\33\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\5\12\2\332"+
    "\24\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\333\3\0\1\64\1\12\3\0"+
    "\4\64\33\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\2\12\1\334\27\12\1\334\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\5\12\2\335"+
    "\24\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\336\3\0"+
    "\4\64\20\12\1\336\12\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\15\12\2\337\14\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\11\12"+
    "\1\340\21\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\24\12\1\341\6\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\342\3\0\4\64\20\12\1\342\12\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\5\12\2\343\24\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\12\3\0\1\64"+
    "\1\12\3\0\4\64\22\12\1\344\10\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\5\12\2\345"+
    "\24\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\15\12\2\346\14\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\21\12\1\347\11\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\2\12"+
    "\1\350\26\12\1\350\1\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\2\351\31\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\12\3\0\1\64\1\12\3\0\4\64\4\12\1\352"+
    "\26\12\2\0\1\64\3\0\1\64\3\0\1\64\3\0"+
    "\1\64\1\0\1\64\1\5\2\64\1\0\1\64\1\12"+
    "\2\64\1\72\1\0\1\12\3\0\1\64\1\12\3\0"+
    "\4\64\14\12\1\353\16\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\25\12\1\354\5\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\2\12"+
    "\1\355\26\12\1\355\1\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\14\12\1\356\16\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\14\12"+
    "\1\357\16\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\13\12\1\360\17\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\361"+
    "\3\0\1\64\1\12\3\0\4\64\33\12\2\0\1\64"+
    "\3\0\1\64\3\0\1\64\3\0\1\64\1\0\1\64"+
    "\1\5\2\64\1\0\1\64\1\12\2\64\1\72\1\0"+
    "\1\362\3\0\1\64\1\12\3\0\4\64\33\12\2\0"+
    "\1\64\3\0\1\64\3\0\1\64\3\0\1\64\1\0"+
    "\1\64\1\5\2\64\1\0\1\64\1\12\2\64\1\72"+
    "\1\0\1\12\3\0\1\64\1\12\3\0\4\64\15\12"+
    "\2\363\14\12\2\0\1\64\3\0\1\64\3\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\5\2\64\1\0\1\64"+
    "\1\12\2\64\1\72\1\0\1\12\3\0\1\64\1\12"+
    "\3\0\4\64\13\12\1\364\17\12\2\0\1\64\3\0"+
    "\1\64\3\0\1\64\3\0\1\64\1\0\1\64\1\5"+
    "\2\64\1\0\1\64\1\12\2\64\1\72\1\0\1\12"+
    "\3\0\1\64\1\12\3\0\4\64\27\12\1\365\3\12"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\3\0\1\64"+
    "\1\0\1\64\1\5\2\64\1\0\1\64\1\12\2\64"+
    "\1\72\1\0\1\12\3\0\1\64\1\12\3\0\4\64"+
    "\15\12\2\366\14\12\2\0\1\64\3\0\1\64\3\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\5\2\64\1\0"+
    "\1\64\1\12\2\64\1\72\1\0\1\367\3\0\1\64"+
    "\1\12\3\0\4\64\33\12\2\0\1\64\3\0\1\64"+
    "\3\0\1\64\3\0\1\64\1\0\1\64\1\5\2\64"+
    "\1\0\1\64\1\12\2\64\1\72\1\0\1\12\3\0"+
    "\1\64\1\12\3\0\4\64\3\12\1\370\26\12\1\370"+
    "\2\0\1\64\3\0\1\64\3\0\1\64\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12462];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\3\1\1\11\22\1\2\11"+
    "\1\1\1\11\4\1\2\11\2\1\2\0\2\1\2\0"+
    "\1\1\1\0\7\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\33\1\3\11\1\1\1\11\2\1\3\0\1\1\1\0"+
    "\1\1\1\0\1\11\2\0\1\1\1\11\34\1\1\0"+
    "\2\1\4\0\33\1\2\0\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _SparqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 236) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return KW_PREFIX;
          }
        case 71: break;
        case 39: 
          { return OP_HATHAT;
          }
        case 72: break;
        case 19: 
          { return OP_COMMA;
          }
        case 73: break;
        case 29: 
          { return VAR;
          }
        case 74: break;
        case 27: 
          { return OP_GE;
          }
        case 75: break;
        case 46: 
          { return LIT_TRUE;
          }
        case 76: break;
        case 30: 
          { return LANGTAG;
          }
        case 77: break;
        case 28: 
          { return LIT_PNAME_LN;
          }
        case 78: break;
        case 35: 
          { return KW_BY;
          }
        case 79: break;
        case 9: 
          { return OP_PLUS;
          }
        case 80: break;
        case 7: 
          { return LIT_INTEGER;
          }
        case 81: break;
        case 45: 
          { return KW_LANG;
          }
        case 82: break;
        case 11: 
          { return OP_LROUND;
          }
        case 83: break;
        case 12: 
          { return OP_RROUND;
          }
        case 84: break;
        case 38: 
          { return OP_NE;
          }
        case 85: break;
        case 4: 
          { return LIT_PNAME_NS;
          }
        case 86: break;
        case 49: 
          { return KW_REGEX;
          }
        case 87: break;
        case 65: 
          { return KW_DESCRIBE;
          }
        case 88: break;
        case 55: 
          { return KW_UNION;
          }
        case 89: break;
        case 47: 
          { return KW_NAMED;
          }
        case 90: break;
        case 66: 
          { return KW_DATATYPE;
          }
        case 91: break;
        case 20: 
          { return OP_EQ;
          }
        case 92: break;
        case 34: 
          { return LIT_ANON;
          }
        case 93: break;
        case 24: 
          { return COMMENT;
          }
        case 94: break;
        case 22: 
          { return OP_MULT;
          }
        case 95: break;
        case 52: 
          { return KW_IS_URI;
          }
        case 96: break;
        case 53: 
          { return KW_LIMIT;
          }
        case 97: break;
        case 13: 
          { return OP_LSQUARE;
          }
        case 98: break;
        case 6: 
          { return OP_MINUS;
          }
        case 99: break;
        case 40: 
          { return LIT_DOUBLE;
          }
        case 100: break;
        case 26: 
          { return OP_LE;
          }
        case 101: break;
        case 62: 
          { return KW_REDUCED;
          }
        case 102: break;
        case 51: 
          { return KW_IS_IRI;
          }
        case 103: break;
        case 5: 
          { return UNKNOWN;
          }
        case 104: break;
        case 15: 
          { return KW_A;
          }
        case 105: break;
        case 25: 
          { return LIT_IRI;
          }
        case 106: break;
        case 48: 
          { return KW_BOUND;
          }
        case 107: break;
        case 57: 
          { return KW_GRAPH;
          }
        case 108: break;
        case 60: 
          { return KW_FILTER;
          }
        case 109: break;
        case 2: 
          { return OP_LT;
          }
        case 110: break;
        case 68: 
          { return KW_IS_LITERAL;
          }
        case 111: break;
        case 69: 
          { return KW_CONSTRUCT;
          }
        case 112: break;
        case 42: 
          { return KW_STR;
          }
        case 113: break;
        case 61: 
          { return KW_OFFSET;
          }
        case 114: break;
        case 41: 
          { return KW_ASK;
          }
        case 115: break;
        case 33: 
          { return LIT_NIL;
          }
        case 116: break;
        case 64: 
          { return KW_OPTIONAL;
          }
        case 117: break;
        case 18: 
          { return OP_SEMI;
          }
        case 118: break;
        case 44: 
          { return KW_FROM;
          }
        case 119: break;
        case 70: 
          { return KW_LANGMATCHES;
          }
        case 120: break;
        case 31: 
          { return LIT_DECIMAL;
          }
        case 121: break;
        case 36: 
          { return OP_PIPEPIPE;
          }
        case 122: break;
        case 8: 
          { return OP_DOT;
          }
        case 123: break;
        case 50: 
          { return LIT_FALSE;
          }
        case 124: break;
        case 23: 
          { return OP_DIV;
          }
        case 125: break;
        case 14: 
          { return OP_RSQUARE;
          }
        case 126: break;
        case 1: 
          { return BAD_CHARACTER;
          }
        case 127: break;
        case 3: 
          { return OP_RT;
          }
        case 128: break;
        case 67: 
          { return KW_DISTINCT;
          }
        case 129: break;
        case 32: 
          { return LIT_STRING;
          }
        case 130: break;
        case 21: 
          { return OP_NOT;
          }
        case 131: break;
        case 10: 
          { return WHITE_SPACE;
          }
        case 132: break;
        case 54: 
          { return KW_ORDER;
          }
        case 133: break;
        case 37: 
          { return OP_ANDAND;
          }
        case 134: break;
        case 56: 
          { return KW_WHERE;
          }
        case 135: break;
        case 16: 
          { return OP_LCURLY;
          }
        case 136: break;
        case 63: 
          { return KW_SAME_TERM;
          }
        case 137: break;
        case 58: 
          { return KW_SELECT;
          }
        case 138: break;
        case 43: 
          { return KW_BASE;
          }
        case 139: break;
        case 17: 
          { return OP_RCURLY;
          }
        case 140: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
